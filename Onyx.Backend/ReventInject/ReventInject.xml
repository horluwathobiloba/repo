<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>FBNCInject.Framework</name>
  </assembly>
  <members>
    <member name="N:FBNCInject.Framework">
    </member>
    <member name="T:FBNCInject.Framework.ControlChars">
    </member>
    <member name="T:FBNCInject.Framework.Extension">
    </member>
    <member name="M:FBNCInject.Framework.Extension.IsNumeric2(System.String)">
      <param name="s">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Extension.IsNumeric(System.Object)">
      <param name="Expression">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Extension.IsDate(System.Object)">
      <param name="sdate">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Extension.GenerateUniqueID(System.Int32,System.String)">
      <param name="length">
</param>
      <param name="prefix">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Extension.GenerateUniqueIDFromDate(System.Int32,System.String)">
      <param name="length">
</param>
      <param name="prefix">
</param>
    </member>
    <member name="N:FBNCInject.Framework.DataAccess">
    </member>
    <member name="T:FBNCInject.Framework.DataAccess.ADOExtensions">
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.#ctor(System.String)">
      <param name="_conStr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.#ctor(System.String,System.Boolean)">
      <param name="_conStr">
</param>
      <param name="_InvokeTxn">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.ExecuteScalar(System.String)">
      <param name="StrQuery">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.LoadQueryData``1(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.LoadDataTable(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.RunQuery(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.RecordExists(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.ExecuteMany(System.Collections.Generic.List{System.String})">
      <param name="queryStrings">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.ExecuteQuery(System.String)">
      <param name="queryString">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.Insert``1(``0,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.Update``1(``0,System.String,System.String,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
      <param name="IDColumnName">
</param>
      <param name="ID">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.Insert``1(System.Collections.Generic.List{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.InsertRecord``1(``0,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.InsertRecords``1(System.Collections.Generic.List{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOExtensions.Insert``1(System.Collections.Generic.List{``0},System.String,System.Collections.Generic.List{``0}@)">
      <param name="list">
</param>
      <param name="TableName">
</param>
      <param name="failed">
</param>
    </member>
    <member name="T:FBNCInject.Framework.DataAccess.ADOOleDbExtensions">
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.#ctor(System.String)">
      <param name="_conStr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.#ctor(System.String,System.Boolean)">
      <param name="_conStr">
</param>
      <param name="_InvokeTxn">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.ExecuteScalar(System.String)">
      <param name="StrQuery">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.LoadQueryData``1(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.LoadDataTable(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.RunQuery(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.RecordExists(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.ExecuteMany(System.Collections.Generic.List{System.String})">
      <param name="queryStrings">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.ExecuteQuery(System.String)">
      <param name="queryString">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.Insert``1(``0,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.BuildUpdateQuery``1(``0,System.String,System.String,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
      <param name="IDColumnName">
</param>
      <param name="ID">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.Update``1(``0,System.String,System.String,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
      <param name="IDColumnName">
</param>
      <param name="ID">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.Insert``1(System.Collections.Generic.List{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.InsertRecord``1(``0,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.InsertRecords``1(System.Collections.Generic.List{``0},System.String,System.String@)">
      <param name="list">
</param>
      <param name="TableName">
</param>
      <param name="errMsg">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOleDbExtensions.Insert``1(System.Collections.Generic.List{``0},System.String,System.Collections.Generic.List{``0}@)">
      <param name="list">
</param>
      <param name="TableName">
</param>
      <param name="failed">
</param>
    </member>
    <member name="T:FBNCInject.Framework.DataAccess.ADOOracleExtensions">
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.#ctor(System.String)">
      <param name="_conStr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.#ctor(System.String,System.Boolean)">
      <param name="_conStr">
</param>
      <param name="_InvokeTxn">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.ExecuteScalar(System.String)">
      <param name="StrQuery">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.LoadQueryData``1(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.LoadData(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.LoadRecords(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.LoadDataTable(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.RunQuery(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.RecordExists(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.ExecuteMany(System.Collections.Generic.List{System.String})">
      <param name="queryStrings">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.ExecuteQuery(System.String)">
      <param name="queryString">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.Insert``1(``0,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.BuildUpdateQuery``1(``0,System.String,System.String,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
      <param name="IDColumnName">
</param>
      <param name="ID">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.Update``1(``0,System.String,System.String,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
      <param name="IDColumnName">
</param>
      <param name="ID">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.Insert``1(System.Collections.Generic.List{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.InsertRecord``1(``0,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.InsertRecords``1(System.Collections.Generic.List{``0},System.String,System.String@)">
      <param name="list">
</param>
      <param name="TableName">
</param>
      <param name="errMsg">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOOracleExtensions.Insert``1(System.Collections.Generic.List{``0},System.String,System.Collections.Generic.List{``0}@)">
      <param name="list">
</param>
      <param name="TableName">
</param>
      <param name="failed">
</param>
    </member>
    <member name="T:FBNCInject.Framework.DataAccess.ADOSqlExtensions">
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.#ctor(System.String)">
      <param name="_conStr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.#ctor(System.String,System.Boolean)">
      <param name="_conStr">
</param>
      <param name="_InvokeTxn">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.ExecuteScalar(System.String)">
      <param name="StrQuery">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.LoadQueryData``1(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.LoadDataTable(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.RunQuery(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.RecordExists(System.String)">
      <param name="query">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.ExecuteMany(System.Collections.Generic.List{System.String})">
      <param name="queryStrings">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.ExecuteQuery(System.String)">
      <param name="queryString">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.Insert``1(``0,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.BuildUpdateQuery``1(``0,System.String,System.String,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
      <param name="IDColumnName">
</param>
      <param name="ID">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.Update``1(``0,System.String,System.String,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
      <param name="IDColumnName">
</param>
      <param name="ID">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.Insert``1(System.Collections.Generic.List{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.InsertRecord``1(``0,System.String)">
      <param name="obj">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.InsertRecords``1(System.Collections.Generic.List{``0},System.String,System.String@)">
      <param name="list">
</param>
      <param name="TableName">
</param>
      <param name="errMsg">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.ADOSqlExtensions.Insert``1(System.Collections.Generic.List{``0},System.String,System.Collections.Generic.List{``0}@)">
      <param name="list">
</param>
      <param name="TableName">
</param>
      <param name="failed">
</param>
    </member>
    <member name="T:FBNCInject.Framework.DataAccess.DALExtension">
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtension.#ctor(System.String)">
      <param name="_constr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtension.ToDataSet``1(System.Collections.Generic.IList{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtension.IsNullableType(System.Type)">
      <param name="myType">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtension.ToDataTable``1(System.Collections.Generic.IList{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtension.ToDataSet2``1(System.Collections.Generic.IList{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtension.ToDataTable2``1(System.Collections.Generic.List{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="T:FBNCInject.Framework.DataAccess.CollectionHelper">
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.ConvertTo``1(System.Collections.Generic.IList{``0})">
      <param name="list">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.ConvertTo``1(System.Collections.Generic.IList{System.Data.DataRow})">
      <param name="rows">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.ConvertTo``1(System.Data.DataTable)">
      <param name="table">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.CreateItem``1(System.Data.DataRow)">
      <param name="row">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.CreateTable``1">
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.CreateObj``1(System.Data.DataRow,``0)">
      <param name="row">
</param>
      <param name="obj">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.ConvertToObjList``1(System.Collections.Generic.IList{System.Data.DataRow})">
      <param name="rows">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.ConvertToObjList``1(System.Data.DataTable)">
      <param name="table">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.getTableStructure(System.String,System.String)">
      <param name="TableName">
</param>
      <param name="constr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.getObjectInfo``1(System.Data.DataTable,T)">
      <param name="tbl">
</param>
      <param name="ob">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.getObjectInfo``1(System.Collections.Generic.List{System.String},T)">
      <param name="NameList">
</param>
      <param name="ob">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.getPropertyInfo``1(System.Data.DataRow,T)">
      <param name="row">
</param>
      <param name="obj">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.getPropertyInfo``1(System.String,System.String,T)">
      <param name="TableName">
</param>
      <param name="constr">
</param>
      <param name="obj">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.getPropertyInfos``1(System.Data.DataTable,T)">
      <param name="tbl">
</param>
      <param name="ob">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.getPropertyInfos``1(System.Collections.Generic.List{System.String},T)">
      <param name="NameList">
</param>
      <param name="ob">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.InsertObject``1(System.Data.DataTable,``0,System.String)">
      <param name="Tbl">
</param>
      <param name="obj">
</param>
      <param name="constr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.InsertObject``1(System.String,``0,System.String)">
      <param name="TableName">
</param>
      <param name="obj">
</param>
      <param name="constr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.InsertRecord``1(System.String,System.Data.DataRow,System.String)">
      <param name="TableName">
</param>
      <param name="row">
</param>
      <param name="constr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.InsertRecord``1(System.String,``0,System.String)">
      <param name="TableName">
</param>
      <param name="obj">
</param>
      <param name="constr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.Insert``1(System.String,System.Data.DataRow,System.String)">
      <param name="TableName">
</param>
      <param name="row">
</param>
      <param name="constr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.Insert``1(System.String,``0,System.String)">
      <param name="TableName">
</param>
      <param name="obj">
</param>
      <param name="constr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.CollectionHelper.doIT(System.Data.DataTable,System.Object)">
      <param name="Tbl">
</param>
      <param name="ob">
</param>
    </member>
    <member name="T:FBNCInject.Framework.DataAccess.CollectionHelper.PropInfo">
    </member>
    <member name="P:FBNCInject.Framework.DataAccess.CollectionHelper.PropInfo.NameKey">
    </member>
    <member name="P:FBNCInject.Framework.DataAccess.CollectionHelper.PropInfo.Value">
    </member>
    <member name="T:FBNCInject.Framework.DataAccess.DALExtensions">
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtensions.#ctor(System.String)">
      <param name="constring">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtensions.ToDataSet``1(System.Collections.Generic.IList{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtensions.ToDataTable``1(System.Collections.Generic.IList{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtensions.ToDataSet2``1(System.Collections.Generic.IList{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtensions.ToDataTable2``1(System.Collections.Generic.List{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="T:FBNCInject.Framework.DataAccess.DALExtensions.CollectionHelper">
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtensions.CollectionHelper.ConvertTo``1(System.Collections.Generic.IList{``0})">
      <param name="list">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtensions.CollectionHelper.ConvertTo``1(System.Collections.Generic.IList{System.Data.DataRow})">
      <param name="rows">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtensions.CollectionHelper.ConvertTo``1(System.Data.DataTable)">
      <param name="table">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtensions.CollectionHelper.CreateItem``1(System.Data.DataRow)">
      <param name="row">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALExtensions.CollectionHelper.CreateTable``1">
    </member>
    <member name="T:FBNCInject.Framework.DataAccess.DALThreadExtensions">
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALThreadExtensions.#ctor(System.String)">
      <param name="constring">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALThreadExtensions.ToDataSet``1(System.Collections.Generic.IList{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALThreadExtensions.ToDataTable``1(System.Collections.Generic.IList{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALThreadExtensions.ToDataSet2``1(System.Collections.Generic.IList{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALThreadExtensions.ToDataTable2``1(System.Collections.Generic.List{``0},System.String)">
      <param name="list">
</param>
      <param name="TableName">
</param>
    </member>
    <member name="T:FBNCInject.Framework.DataAccess.DALThreadExtensions.ThreadCollectionHelper">
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALThreadExtensions.ThreadCollectionHelper.ConvertTo``1(System.Collections.Generic.IList{``0})">
      <param name="list">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALThreadExtensions.ThreadCollectionHelper.ConvertTo``1(System.Collections.Generic.List{System.Data.DataRow})">
      <param name="rows">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALThreadExtensions.ThreadCollectionHelper.ConvertTo``1(System.Data.DataTable)">
      <param name="table">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALThreadExtensions.ThreadCollectionHelper.CreateItem``1(System.Data.DataRow)">
      <param name="row">
</param>
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.DALThreadExtensions.ThreadCollectionHelper.CreateTable``1">
    </member>
    <member name="T:FBNCInject.Framework.DataAccess.PetaProxy">
    </member>
    <member name="M:FBNCInject.Framework.DataAccess.PetaProxy.#ctor(System.String)">
      <param name="conStr">
</param>
    </member>
    <member name="N:FBNCInject.Framework.Entities">
    </member>
    <member name="T:FBNCInject.Framework.Entities.TrailItem">
    </member>
    <member name="M:FBNCInject.Framework.Entities.TrailItem.#ctor(System.String,System.String,System.String)">
      <param name="name">
</param>
      <param name="valueBefore">
</param>
      <param name="valueAfter">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Entities.TrailItem.#ctor">
    </member>
    <member name="M:FBNCInject.Framework.Entities.TrailItem.#ctor(System.String)">
      <param name="name">
</param>
    </member>
    <member name="P:FBNCInject.Framework.Entities.TrailItem.Name">
    </member>
    <member name="P:FBNCInject.Framework.Entities.TrailItem.ValueBefore">
    </member>
    <member name="P:FBNCInject.Framework.Entities.TrailItem.ValueAfter">
    </member>
    <member name="T:FBNCInject.Framework.InjectGlobal">
    </member>
    <member name="M:FBNCInject.Framework.InjectGlobal.GetIPv4Address">
    </member>
    <member name="M:FBNCInject.Framework.InjectGlobal.ToFinacleDate(System.DateTime)">
      <param name="d">
</param>
    </member>
    <member name="M:FBNCInject.Framework.InjectGlobal.IsDate(System.DateTime)">
      <param name="d">
</param>
    </member>
    <member name="M:FBNCInject.Framework.InjectGlobal.DaysBetween(System.DateTime,System.DateTime)">
      <param name="FromDate">
</param>
      <param name="ToDate">
</param>
    </member>
    <member name="M:FBNCInject.Framework.InjectGlobal.IsValidDate(System.Object)">
      <param name="d">
</param>
    </member>
    <member name="N:PetaPoco">
    </member>
    <member name="T:PetaPoco.Database">
      <summary>
The main PetaPoco Database class. You can either use this class directly, or derive from it.</summary>
    </member>
    <member name="M:PetaPoco.Database.Dispose">
      <summary>
Automatically close one open shared connection</summary>
    </member>
    <member name="M:PetaPoco.Database.#ctor">
      <summary>
Constructs an instance using the first connection string found in the app/web configuration file.</summary>
      <exception cref="InvalidOperationException">
Thrown when no connection strings can registered.</exception>
    </member>
    <member name="M:PetaPoco.Database.#ctor(System.Data.IDbConnection)">
      <summary>
Constructs an instance using a supplied IDbConnection.</summary>
      <remarks>
The supplied IDbConnection will not be closed/disposed by PetaPoco - that remains the responsibility of the caller.</remarks>
      <param name="connection">
The IDbConnection to use.</param>
      <exception cref="ArgumentException">
Thrown when <paramref name="connection" /> is null or empty.</exception>
    </member>
    <member name="M:PetaPoco.Database.#ctor(System.String,System.String)">
      <summary>
Constructs an instance using a supplied connections string and optionally a provider name. If no provider name is given, the default database provider will be MS SQL Server.</summary>
      <remarks>
PetaPoco will automatically close and dispose any connections it creates.</remarks>
      <param name="connectionString">
The database connection string.</param>
      <param name="providerName">
The database provider name, if given.</param>
      <exception cref="ArgumentException">
Thrown when <paramref name="connectionString" /> is null or empty.</exception>
    </member>
    <member name="M:PetaPoco.Database.#ctor(System.String,System.Data.Common.DbProviderFactory)">
      <summary>
Constructs an instance using the supplied connection string and DbProviderFactory.</summary>
      <param name="connectionString">
The database connection string.</param>
      <param name="factory">
The DbProviderFactory to use for instantiating IDbConnection's.</param>
      <exception cref="ArgumentException">
Thrown when <paramref name="connectionString" /> is null or empty.</exception>
      <exception cref="ArgumentNullException">
Thrown when <paramref name="factory" /> is null.</exception>
    </member>
    <member name="M:PetaPoco.Database.#ctor(System.String)">
      <summary>
Constructs an instance using a supplied connection string name. The actual connection string and provider will be read from app/web.config.</summary>
      <param name="connectionStringName">
The name of the connection.</param>
      <exception cref="ArgumentException">
Thrown when <paramref name="connectionStringName" /> is null or empty.</exception>
      <exception cref="InvalidOperationException">
Thrown when a connection string cannot be found.</exception>
    </member>
    <member name="M:PetaPoco.Database.#ctor(System.String,PetaPoco.IProvider,PetaPoco.IMapper)">
      <summary>
Constructs an instance using the supplied provider and optional default mapper.</summary>
      <param name="connectionString">
The database connection string.</param>
      <param name="provider">
The provider to use.</param>
      <param name="defaultMapper">
The default mapper to use when no specific mapper has been registered.</param>
      <exception cref="ArgumentException">
Thrown when <paramref name="connectionString" /> is null or empty.</exception>
      <exception cref="ArgumentNullException">
Thrown when <paramref name="provider" /> is null.</exception>
    </member>
    <member name="M:PetaPoco.Database.#ctor(PetaPoco.IDatabaseBuildConfiguration)">
      <summary>
Constructs an instance using the supplied <paramref name="configuration" />.</summary>
      <param name="configuration">
The configuration for constructing an instance.</param>
      <exception cref="ArgumentNullException">
Thrown when <paramref name="configuration" /> is null.</exception>
      <exception cref="InvalidOperationException">
Thrown when no configuration string is configured and app/web config does any connection string registered.</exception>
      <exception cref="InvalidOperationException">
Thrown when a connection string configured and no provider is configured.</exception>
    </member>
    <member name="P:PetaPoco.Database.KeepConnectionAlive">
      <summary>
When set to true the first opened connection is kept alive until this object is disposed</summary>
    </member>
    <member name="M:PetaPoco.Database.OpenSharedConnection">
      <summary>
Open a connection that will be used for all subsequent queries.</summary>
      <remarks>
Calls to Open/CloseSharedConnection are reference counted and should be balanced</remarks>
    </member>
    <member name="M:PetaPoco.Database.CloseSharedConnection">
      <summary>
Releases the shared connection</summary>
    </member>
    <member name="P:PetaPoco.Database.Connection">
      <summary>
Provides access to the currently open shared connection (or null if none)</summary>
    </member>
    <member name="M:PetaPoco.Database.GetTransaction">
      <summary>
Starts or continues a transaction.</summary>
      <remarks>
This method makes management of calls to Begin/End/CompleteTransaction easier. The usage pattern for this should be: using (var tx = db.GetTransaction()) { // Do stuff db.Update(...); // Mark the transaction as complete tx.Complete(); } Transactions can be nested but they must all be completed otherwise the entire transaction is aborted.</remarks>
      <returns>
An ITransaction reference that must be Completed or disposed</returns>
    </member>
    <member name="M:PetaPoco.Database.OnBeginTransaction">
      <summary>
Called when a transaction starts. Overridden by the T4 template generated database classes to ensure the same DB instance is used throughout the transaction.</summary>
    </member>
    <member name="M:PetaPoco.Database.OnEndTransaction">
      <summary>
Called when a transaction ends.</summary>
    </member>
    <member name="M:PetaPoco.Database.BeginTransaction">
      <summary>
Starts a transaction scope, see GetTransaction() for recommended usage</summary>
    </member>
    <member name="M:PetaPoco.Database.AbortTransaction">
      <summary>
Aborts the entire outer most transaction scope</summary>
      <remarks>
Called automatically by Transaction.Dispose() if the transaction wasn't completed.</remarks>
    </member>
    <member name="M:PetaPoco.Database.CompleteTransaction">
      <summary>
Marks the current transaction scope as complete.</summary>
    </member>
    <member name="M:PetaPoco.Database.CreateCommand(System.Data.IDbConnection,System.String,System.Object[])">
      <param name="connection">
</param>
      <param name="sql">
</param>
      <param name="args">
</param>
    </member>
    <member name="M:PetaPoco.Database.OnException(System.Exception)">
      <summary>
Called if an exception occurs during processing of a DB operation. Override to provide custom logging/handling.</summary>
      <returns>
True to re-throw the exception, false to suppress it</returns>
      <param name="x">
The exception instance</param>
    </member>
    <member name="M:PetaPoco.Database.OnConnectionOpened(System.Data.IDbConnection)">
      <summary>
Called when DB connection opened</summary>
      <remarks>
Override this method to provide custom logging of opening connection, or to provide a proxy IDbConnection.</remarks>
      <returns>
The same or a replacement IDbConnection</returns>
      <param name="conn">
The newly opened IDbConnection</param>
    </member>
    <member name="M:PetaPoco.Database.OnConnectionClosing(System.Data.IDbConnection)">
      <summary>
Called when DB connection closed</summary>
      <param name="conn">
The soon to be closed IDBConnection</param>
    </member>
    <member name="M:PetaPoco.Database.OnExecutingCommand(System.Data.IDbCommand)">
      <summary>
Called just before an DB command is executed</summary>
      <remarks>
Override this method to provide custom logging of commands and/or modification of the IDbCommand before it's executed</remarks>
      <param name="cmd">
The command to be executed</param>
    </member>
    <member name="M:PetaPoco.Database.OnExecutedCommand(System.Data.IDbCommand)">
      <summary>
Called on completion of command execution</summary>
      <param name="cmd">
The IDbCommand that finished executing</param>
    </member>
    <member name="M:PetaPoco.Database.Execute(System.String,System.Object[])">
      <summary>
Executes a non-query command</summary>
      <returns>
The number of rows affected</returns>
      <param name="sql">
The SQL statement to execute</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Execute(PetaPoco.Sql)">
      <summary>
Executes a non-query command</summary>
      <returns>
The number of rows affected</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.ExecuteScalar``1(System.String,System.Object[])">
      <summary>
Executes a query and return the first column of the first row in the result set.</summary>
      <returns>
The scalar value cast to T</returns>
      <param name="sql">
The SQL query to execute</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.ExecuteScalar``1(PetaPoco.Sql)">
      <summary>
Executes a query and return the first column of the first row in the result set.</summary>
      <returns>
The scalar value cast to T</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``1(System.String,System.Object[])">
      <summary>
Runs a query and returns the result set as a typed list</summary>
      <returns>
A List holding the results of the query</returns>
      <param name="sql">
The SQL query to execute</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``1(PetaPoco.Sql)">
      <summary>
Runs a query and returns the result set as a typed list</summary>
      <returns>
A List holding the results of the query</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,System.String,System.Object[],System.String,System.Object[])">
      <summary>
Retrieves a page of records and the total number of available records</summary>
      <remarks>
This method allows separate SQL statements to be explicitly provided for the two parts of the page query. The page and itemsPerPage parameters are not used directly and are used simply to populate the returned Page object.</remarks>
      <returns>
A Page of results</returns>
      <param name="page">
The 1 based page number to retrieve</param>
      <param name="itemsPerPage">
The number of records per page</param>
      <param name="sqlCount">
The SQL to retrieve the total number of records</param>
      <param name="countArgs">
Arguments to any embedded parameters in the sqlCount statement</param>
      <param name="sqlPage">
The SQL To retrieve a single page of results</param>
      <param name="pageArgs">
Arguments to any embedded parameters in the sqlPage statement</param>
    </member>
    <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>
Retrieves a page of records and the total number of available records</summary>
      <remarks>
PetaPoco will automatically modify the supplied SELECT statement to only retrieve the records for the specified page. It will also execute a second query to retrieve the total number of records in the result set.</remarks>
      <returns>
A Page of results</returns>
      <param name="page">
The 1 based page number to retrieve</param>
      <param name="itemsPerPage">
The number of records per page</param>
      <param name="sql">
The base SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,PetaPoco.Sql)">
      <summary>
Retrieves a page of records and the total number of available records</summary>
      <remarks>
PetaPoco will automatically modify the supplied SELECT statement to only retrieve the records for the specified page. It will also execute a second query to retrieve the total number of records in the result set.</remarks>
      <returns>
A Page of results</returns>
      <param name="page">
The 1 based page number to retrieve</param>
      <param name="itemsPerPage">
The number of records per page</param>
      <param name="sql">
An SQL builder object representing the base SQL query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,PetaPoco.Sql,PetaPoco.Sql)">
      <summary>
Retrieves a page of records and the total number of available records</summary>
      <remarks>
This method allows separate SQL statements to be explicitly provided for the two parts of the page query. The page and itemsPerPage parameters are not used directly and are used simply to populate the returned Page object.</remarks>
      <returns>
A Page of results</returns>
      <param name="page">
The 1 based page number to retrieve</param>
      <param name="itemsPerPage">
The number of records per page</param>
      <param name="sqlCount">
An SQL builder object representing the SQL to retrieve the total number of records</param>
      <param name="sqlPage">
An SQL builder object representing the SQL to retrieve a single page of results</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``1(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>
Retrieves a page of records (without the total count)</summary>
      <remarks>
PetaPoco will automatically modify the supplied SELECT statement to only retrieve the records for the specified page.</remarks>
      <returns>
A List of results</returns>
      <param name="page">
The 1 based page number to retrieve</param>
      <param name="itemsPerPage">
The number of records per page</param>
      <param name="sql">
The base SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``1(System.Int64,System.Int64,PetaPoco.Sql)">
      <summary>
Retrieves a page of records (without the total count)</summary>
      <remarks>
PetaPoco will automatically modify the supplied SELECT statement to only retrieve the records for the specified page.</remarks>
      <returns>
A List of results</returns>
      <param name="page">
The 1 based page number to retrieve</param>
      <param name="itemsPerPage">
The number of records per page</param>
      <param name="sql">
An SQL builder object representing the base SQL query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.SkipTake``1(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>
Retrieves a range of records from result set</summary>
      <remarks>
PetaPoco will automatically modify the supplied SELECT statement to only retrieve the records for the specified range.</remarks>
      <returns>
A List of results</returns>
      <param name="skip">
The number of rows at the start of the result set to skip over</param>
      <param name="take">
The number of rows to retrieve</param>
      <param name="sql">
The base SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.Database.SkipTake``1(System.Int64,System.Int64,PetaPoco.Sql)">
      <summary>
Retrieves a range of records from result set</summary>
      <remarks>
PetaPoco will automatically modify the supplied SELECT statement to only retrieve the records for the specified range.</remarks>
      <returns>
A List of results</returns>
      <param name="skip">
The number of rows at the start of the result set to skip over</param>
      <param name="take">
The number of rows to retrieve</param>
      <param name="sql">
An SQL builder object representing the base SQL query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Query``1(System.String,System.Object[])">
      <summary>
Runs an SQL query, returning the results as an IEnumerable collection</summary>
      <remarks>
For some DB providers, care should be taken to not start a new Query before finishing with and disposing the previous one. In cases where this is an issue, consider using Fetch which returns the results as a List rather than an IEnumerable.</remarks>
      <returns>
An enumerable collection of result records</returns>
      <param name="sql">
The SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.Database.Query``1(PetaPoco.Sql)">
      <summary>
Runs an SQL query, returning the results as an IEnumerable collection</summary>
      <remarks>
For some DB providers, care should be taken to not start a new Query before finishing with and disposing the previous one. In cases where this is an issue, consider using Fetch which returns the results as a List rather than an IEnumerable.</remarks>
      <returns>
An enumerable collection of result records</returns>
      <param name="sql">
An SQL builder object representing the base SQL query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Exists``1(System.String,System.Object[])">
      <summary>
Checks for the existence of a row matching the specified condition</summary>
      <returns>
True if a record matching the condition is found.</returns>
      <param name="sqlCondition">
The SQL expression to be tested for (ie: the WHERE expression)</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.Database.Exists``1(System.Object)">
      <summary>
Checks for the existence of a row with the specified primary key value.</summary>
      <returns>
True if a record with the specified primary key value exists.</returns>
      <param name="primaryKey">
The primary key value to look for</param>
    </member>
    <member name="M:PetaPoco.Database.Single``1(System.Object)">
      <summary>
Returns the record with the specified primary key value</summary>
      <remarks>
Throws an exception if there are zero or more than one record with the specified primary key value.</remarks>
      <returns>
The single record matching the specified primary key value</returns>
      <param name="primaryKey">
The primary key value of the record to fetch</param>
    </member>
    <member name="M:PetaPoco.Database.SingleOrDefault``1(System.Object)">
      <summary>
Returns the record with the specified primary key value, or the default value if not found</summary>
      <remarks>
If there are no records with the specified primary key value, default(T) (typically null) is returned.</remarks>
      <returns>
The single record matching the specified primary key value</returns>
      <param name="primaryKey">
The primary key value of the record to fetch</param>
    </member>
    <member name="M:PetaPoco.Database.Single``1(System.String,System.Object[])">
      <summary>
Runs a query that should always return a single row.</summary>
      <remarks>
Throws an exception if there are zero or more than one matching record</remarks>
      <returns>
The single record matching the specified primary key value</returns>
      <param name="sql">
The SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.Database.SingleOrDefault``1(System.String,System.Object[])">
      <summary>
Runs a query that should always return either a single row, or no rows</summary>
      <returns>
The single record matching the specified primary key value, or default(T) if no matching rows</returns>
      <param name="sql">
The SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.Database.First``1(System.String,System.Object[])">
      <summary>
Runs a query that should always return at least one return</summary>
      <returns>
The first record in the result set</returns>
      <param name="sql">
The SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.Database.FirstOrDefault``1(System.String,System.Object[])">
      <summary>
Runs a query and returns the first record, or the default value if no matching records</summary>
      <returns>
The first record in the result set, or default(T) if no matching rows</returns>
      <param name="sql">
The SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.Database.Single``1(PetaPoco.Sql)">
      <summary>
Runs a query that should always return a single row.</summary>
      <remarks>
Throws an exception if there are zero or more than one matching record</remarks>
      <returns>
The single record matching the specified primary key value</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.SingleOrDefault``1(PetaPoco.Sql)">
      <summary>
Runs a query that should always return either a single row, or no rows</summary>
      <returns>
The single record matching the specified primary key value, or default(T) if no matching rows</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.First``1(PetaPoco.Sql)">
      <summary>
Runs a query that should always return at least one return</summary>
      <returns>
The first record in the result set</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.FirstOrDefault``1(PetaPoco.Sql)">
      <summary>
Runs a query and returns the first record, or the default value if no matching records</summary>
      <returns>
The first record in the result set, or default(T) if no matching rows</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Insert(System.String,System.Object)">
      <summary>
Performs an SQL Insert</summary>
      <returns>
The auto allocated primary key of the new record, or null for non-auto-increment tables</returns>
      <param name="tableName">
The name of the table to insert into</param>
      <param name="poco">
The POCO object that specifies the column values to be inserted</param>
    </member>
    <member name="M:PetaPoco.Database.Insert(System.String,System.String,System.Object)">
      <summary>
Performs an SQL Insert</summary>
      <returns>
The auto allocated primary key of the new record, or null for non-auto-increment tables</returns>
      <param name="tableName">
The name of the table to insert into</param>
      <param name="primaryKeyName">
The name of the primary key column of the table</param>
      <param name="poco">
The POCO object that specifies the column values to be inserted</param>
    </member>
    <member name="M:PetaPoco.Database.Insert(System.String,System.String,System.Boolean,System.Object)">
      <summary>
Performs an SQL Insert</summary>
      <remarks>
Inserts a poco into a table. If the poco has a property with the same name as the primary key the id of the new record is assigned to it. Either way, the new id is returned.</remarks>
      <returns>
The auto allocated primary key of the new record, or null for non-auto-increment tables</returns>
      <param name="tableName">
The name of the table to insert into</param>
      <param name="primaryKeyName">
The name of the primary key column of the table</param>
      <param name="autoIncrement">
True if the primary key is automatically allocated by the DB</param>
      <param name="poco">
The POCO object that specifies the column values to be inserted</param>
    </member>
    <member name="M:PetaPoco.Database.Insert(System.Object)">
      <summary>
Performs an SQL Insert</summary>
      <remarks>
The name of the table, it's primary key and whether it's an auto-allocated primary key are retrieved from the POCO's attributes</remarks>
      <returns>
The auto allocated primary key of the new record, or null for non-auto-increment tables</returns>
      <param name="poco">
The POCO object that specifies the column values to be inserted</param>
    </member>
    <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Object)">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected records</returns>
      <param name="tableName">
The name of the table to update</param>
      <param name="primaryKeyName">
The name of the primary key column of the table</param>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
      <param name="primaryKeyValue">
The primary key of the record to be updated</param>
    </member>
    <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="tableName">
The name of the table to update</param>
      <param name="primaryKeyName">
The name of the primary key column of the table</param>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
      <param name="primaryKeyValue">
The primary key of the record to be updated</param>
      <param name="columns">
The column names of the columns to be updated, or null for all</param>
    </member>
    <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object)">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="tableName">
The name of the table to update</param>
      <param name="primaryKeyName">
The name of the primary key column of the table</param>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
    </member>
    <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="tableName">
The name of the table to update</param>
      <param name="primaryKeyName">
The name of the primary key column of the table</param>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
      <param name="columns">
The column names of the columns to be updated, or null for all</param>
    </member>
    <member name="M:PetaPoco.Database.Update(System.Object,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
      <param name="columns">
The column names of the columns to be updated, or null for all</param>
    </member>
    <member name="M:PetaPoco.Database.Update(System.Object)">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
    </member>
    <member name="M:PetaPoco.Database.Update(System.Object,System.Object)">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
      <param name="primaryKeyValue">
The primary key of the record to be updated</param>
    </member>
    <member name="M:PetaPoco.Database.Update(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
      <param name="primaryKeyValue">
The primary key of the record to be updated</param>
      <param name="columns">
The column names of the columns to be updated, or null for all</param>
    </member>
    <member name="M:PetaPoco.Database.Update``1(System.String,System.Object[])">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="sql">
The SQL update and condition clause (ie: everything after "UPDATE tablename"</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Update``1(PetaPoco.Sql)">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="sql">
An SQL builder object representing the SQL update and condition clause (ie: everything after "UPDATE tablename"</param>
    </member>
    <member name="M:PetaPoco.Database.Delete(System.String,System.String,System.Object)">
      <summary>
Performs and SQL Delete</summary>
      <returns>
The number of rows affected</returns>
      <param name="tableName">
The name of the table to delete from</param>
      <param name="primaryKeyName">
The name of the primary key column</param>
      <param name="poco">
The POCO object whose primary key value will be used to delete the row</param>
    </member>
    <member name="M:PetaPoco.Database.Delete(System.String,System.String,System.Object,System.Object)">
      <summary>
Performs and SQL Delete</summary>
      <returns>
The number of rows affected</returns>
      <param name="tableName">
The name of the table to delete from</param>
      <param name="primaryKeyName">
The name of the primary key column</param>
      <param name="poco">
The POCO object whose primary key value will be used to delete the row (or null to use the supplied primary key value)</param>
      <param name="primaryKeyValue">
The value of the primary key identifing the record to be deleted (or null, or get this value from the POCO instance)</param>
    </member>
    <member name="M:PetaPoco.Database.Delete(System.Object)">
      <summary>
Performs an SQL Delete</summary>
      <returns>
The number of rows affected</returns>
      <param name="poco">
The POCO object specifying the table name and primary key value of the row to be deleted</param>
    </member>
    <member name="M:PetaPoco.Database.Delete``1(System.Object)">
      <summary>
Performs an SQL Delete</summary>
      <param name="pocoOrPrimaryKey">
The value of the primary key of the row to delete</param>
    </member>
    <member name="M:PetaPoco.Database.Delete``1(System.String,System.Object[])">
      <summary>
Performs an SQL Delete</summary>
      <returns>
The number of affected rows</returns>
      <param name="sql">
The SQL condition clause identifying the row to delete (ie: everything after "DELETE FROM tablename"</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Delete``1(PetaPoco.Sql)">
      <summary>
Performs an SQL Delete</summary>
      <returns>
The number of affected rows</returns>
      <param name="sql">
An SQL builder object representing the SQL condition clause identifying the row to delete (ie: everything after "UPDATE tablename"</param>
    </member>
    <member name="M:PetaPoco.Database.IsNew(System.String,System.Object)">
      <summary>
Check if a poco represents a new row</summary>
      <remarks>
This method simply tests if the POCO's primary key column property has been set to something non-zero.</remarks>
      <returns>
True if the POCO represents a record already in the database</returns>
      <param name="primaryKeyName">
The name of the primary key column</param>
      <param name="poco">
The object instance whose "newness" is to be tested</param>
    </member>
    <member name="M:PetaPoco.Database.IsNew(System.Object)">
      <summary>
Check if a poco represents a new row</summary>
      <remarks>
This method simply tests if the POCO's primary key column property has been set to something non-zero.</remarks>
      <returns>
True if the POCO represents a record already in the database</returns>
      <param name="poco">
The object instance whose "newness" is to be tested</param>
    </member>
    <member name="M:PetaPoco.Database.Save(System.String,System.String,System.Object)">
      <summary>
Saves a POCO by either performing either an SQL Insert or SQL Update</summary>
      <param name="tableName">
The name of the table to be updated</param>
      <param name="primaryKeyName">
The name of the primary key column</param>
      <param name="poco">
The POCO object to be saved</param>
    </member>
    <member name="M:PetaPoco.Database.Save(System.Object)">
      <summary>
Saves a POCO by either performing either an SQL Insert or SQL Update</summary>
      <param name="poco">
The POCO object to be saved</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``3(System.Func{T1,T2,``0},System.String,System.Object[])">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``4(System.Func{T1,T2,T3,``0},System.String,System.Object[])">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``5(System.Func{T1,T2,T3,T4,``0},System.String,System.Object[])">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Query``3(System.Func{T1,T2,``0},System.String,System.Object[])">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Query``4(System.Func{T1,T2,T3,``0},System.String,System.Object[])">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Query``5(System.Func{T1,T2,T3,T4,``0},System.String,System.Object[])">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``3(System.Func{T1,T2,``0},PetaPoco.Sql)">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``4(System.Func{T1,T2,T3,``0},PetaPoco.Sql)">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``5(System.Func{T1,T2,T3,T4,``0},PetaPoco.Sql)">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Query``3(System.Func{T1,T2,``0},PetaPoco.Sql)">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Query``4(System.Func{T1,T2,T3,``0},PetaPoco.Sql)">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Query``5(System.Func{T1,T2,T3,T4,``0},PetaPoco.Sql)">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``2(System.String,System.Object[])">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``3(System.String,System.Object[])">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``4(System.String,System.Object[])">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Query``2(System.String,System.Object[])">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Query``3(System.String,System.Object[])">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Query``4(System.String,System.Object[])">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``2(PetaPoco.Sql)">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``3(PetaPoco.Sql)">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Fetch``4(PetaPoco.Sql)">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Query``2(PetaPoco.Sql)">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Query``3(PetaPoco.Sql)">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Query``4(PetaPoco.Sql)">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.Database.Query``1(System.Type[],System.Object,System.String,System.Object[])">
      <summary>
Performs a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="types">
An array of Types representing the POCO types of the returned result set.</param>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="P:PetaPoco.Database.LastSQL">
      <summary>
Retrieves the SQL of the last executed statement</summary>
    </member>
    <member name="P:PetaPoco.Database.LastArgs">
      <summary>
Retrieves the arguments to the last execute statement</summary>
    </member>
    <member name="P:PetaPoco.Database.LastCommand">
      <summary>
Returns a formatted string describing the last executed SQL statement and it's argument values</summary>
    </member>
    <member name="M:PetaPoco.Database.FormatCommand(System.Data.IDbCommand)">
      <summary>
Formats the contents of a DB command for display</summary>
      <param name="cmd">
</param>
    </member>
    <member name="M:PetaPoco.Database.FormatCommand(System.String,System.Object[])">
      <summary>
Formats an SQL query and it's arguments for display</summary>
      <param name="sql">
</param>
      <param name="args">
</param>
    </member>
    <member name="P:PetaPoco.Database.DefaultMapper">
      <summary>
Gets the default mapper.</summary>
    </member>
    <member name="P:PetaPoco.Database.EnableAutoSelect">
      <summary>
When set to true, PetaPoco will automatically create the "SELECT columns" part of any query that looks like it needs it</summary>
    </member>
    <member name="P:PetaPoco.Database.EnableNamedParams">
      <summary>
When set to true, parameters can be named ?myparam and populated from properties of the passed in argument values.</summary>
    </member>
    <member name="P:PetaPoco.Database.CommandTimeout">
      <summary>
Sets the timeout value for all SQL statements.</summary>
    </member>
    <member name="P:PetaPoco.Database.OneTimeCommandTimeout">
      <summary>
Sets the timeout value for the next (and only next) SQL statement</summary>
    </member>
    <member name="P:PetaPoco.Database.Provider">
      <summary>
Gets the loaded database provider. <seealso cref="Provider" />.</summary>
      <value>
The loaded database type.</value>
      <seealso cref="Provider">
Provider</seealso>
    </member>
    <member name="P:PetaPoco.Database.ConnectionString">
      <summary>
Gets the connection string.</summary>
      <value>
The connection string.</value>
    </member>
    <member name="P:PetaPoco.Database.IsolationLevel">
      <summary>
Gets or sets the transaction isolation level.</summary>
      <remarks>
When value is null, the underlying providers default isolation level is used.</remarks>
    </member>
    <member name="T:PetaPoco.DatabaseConfiguration">
      <summary>
A helper class which enables fluent configuration.</summary>
    </member>
    <member name="M:PetaPoco.DatabaseConfiguration.Build">
      <summary>
Starts a new PetaPoco build configuration.</summary>
      <returns>
An instance of <see cref="IDatabaseBuildConfiguration" /> to form a fluent interface.</returns>
    </member>
    <member name="T:PetaPoco.DatabaseConfigurationExtensions">
      <summary>
A static helper class where extensions for <see cref="IDatabaseBuildConfiguration" /> are placed.</summary>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingCommandTimeout(PetaPoco.IDatabaseBuildConfiguration,System.Int32)">
      <summary>
Adds a command timeout - see <see cref="IDatabase.CommandTimeout" />.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
      <param name="seconds">
The timeout in seconds.</param>
      <exception cref="ArgumentException">
Thrown when seconds is less than 1.</exception>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.WithNamedParams(PetaPoco.IDatabaseBuildConfiguration)">
      <summary>
Enables named params - see <see cref="IDatabase.EnableNamedParams" />.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.WithoutNamedParams(PetaPoco.IDatabaseBuildConfiguration)">
      <summary>
Disables named params - see <see cref="IDatabase.EnableNamedParams" />.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingProvider``1(PetaPoco.IDatabaseBuildConfiguration,``0)">
      <summary>
Specifies the provider to be used. - see <see cref="IDatabase.Provider" />.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
      <param name="provider">
The provider to use.</param>
      <exception cref="ArgumentNullException">
Thrown when <paramref name="provider" /> is null.</exception>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingProvider``1(PetaPoco.IDatabaseBuildConfiguration,``0,System.Action{``0})">
      <summary>
Specifies the provider to be used. - see <see cref="IDatabase.Provider" />.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
      <param name="provider">
The provider to use.</param>
      <param name="configure">
The configure provider callback.</param>
      <exception cref="ArgumentNullException">
Thrown when <paramref name="provider" /> is null.</exception>
      <exception cref="ArgumentNullException">
Thrown when <paramref name="configure" /> is null.</exception>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingProvider``1(PetaPoco.IDatabaseBuildConfiguration)">
      <summary>
Specifies the provider to be used. - see <see cref="IDatabase.Provider" />.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingProvider``1(PetaPoco.IDatabaseBuildConfiguration,System.Action{``0})">
      <summary>
Specifies the provider to be used. - see <see cref="IDatabase.Provider" />.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
      <param name="configure">
The configure provider callback.</param>
      <exception cref="ArgumentNullException">
Thrown when <paramref name="configure" /> is null.</exception>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.WithAutoSelect(PetaPoco.IDatabaseBuildConfiguration)">
      <summary>
Enables auto select - see <see cref="IDatabase.EnableAutoSelect" />.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.WithoutAutoSelect(PetaPoco.IDatabaseBuildConfiguration)">
      <summary>
Disables auto select - see <see cref="IDatabase.EnableAutoSelect" />.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingConnectionString(PetaPoco.IDatabaseBuildConfiguration,System.String)">
      <summary>
Adds a connection string - see <see cref="IDatabase.ConnectionString" />.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
      <param name="connectionString">
The connection string.</param>
      <exception cref="ArgumentException">
Thrown when <paramref name="connectionString" /> is null or empty.</exception>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingConnectionStringName(PetaPoco.IDatabaseBuildConfiguration,System.String)">
      <summary>
Adds a connection string name.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
      <param name="connectionStringName">
The connection string name.</param>
      <exception cref="ArgumentException">
Thrown when <paramref name="connectionStringName" /> is null or empty.</exception>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingDefaultMapper``1(PetaPoco.IDatabaseBuildConfiguration,``0)">
      <summary>
Specifies the default mapper to use when no specific mapper has been registered.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
      <param name="mapper">
The mapper to use as the default.</param>
      <exception cref="ArgumentNullException">
Thrown when <paramref name="mapper" /> is null.</exception>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingDefaultMapper``1(PetaPoco.IDatabaseBuildConfiguration,``0,System.Action{``0})">
      <summary>
Specifies the default mapper to use when no specific mapper has been registered.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
      <param name="mapper">
The mapper to use as the default.</param>
      <param name="configure">
The configure mapper callback.</param>
      <exception cref="ArgumentNullException">
Thrown when <paramref name="mapper" /> is null.</exception>
      <exception cref="ArgumentNullException">
Thrown when <paramref name="configure" /> is null.</exception>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingDefaultMapper``1(PetaPoco.IDatabaseBuildConfiguration)">
      <summary>
Specifies the default mapper to use when no specific mapper has been registered.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingDefaultMapper``1(PetaPoco.IDatabaseBuildConfiguration,System.Action{``0})">
      <summary>
Specifies the default mapper to use when no specific mapper has been registered.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
      <param name="configure">
The configure mapper callback.</param>
      <exception cref="ArgumentNullException">
Thrown when <paramref name="configure" /> is null.</exception>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingIsolationLevel(PetaPoco.IDatabaseBuildConfiguration,System.Data.IsolationLevel)">
      <summary>
Specifies the transaction isolation level to use.</summary>
      <returns>
The configuration source to form a fluent interface.</returns>
      <param name="source">
The configuration source.</param>
      <param name="isolationLevel">
</param>
    </member>
    <member name="M:PetaPoco.DatabaseConfigurationExtensions.Create(PetaPoco.IDatabaseBuildConfiguration)">
      <summary>
Creates an instance of PetaPooc using the specified <paramref name="source" />.</summary>
      <returns>
An instance of PetaPoco.</returns>
      <param name="source">
The configuration source used to create and configure an instance of PetaPoco.</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Insert(System.String,System.Object)">
      <summary>
Performs an SQL Insert.</summary>
      <returns>
The auto allocated primary key of the new record, or null for non-auto-increment tables.</returns>
      <param name="tableName">
The name of the table to insert into.</param>
      <param name="poco">
The POCO object that specifies the column values to be inserted.</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Insert(System.String,System.String,System.Object)">
      <summary>
Performs an SQL Insert.</summary>
      <returns>
The auto allocated primary key of the new record, or null for non-auto-increment tables.</returns>
      <param name="tableName">
The name of the table to insert into.</param>
      <param name="primaryKeyName">
The name of the primary key column of the table.</param>
      <param name="poco">
The POCO object that specifies the column values to be inserted.</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Insert(System.String,System.String,System.Boolean,System.Object)">
      <summary>
Performs an SQL Insert.</summary>
      <remarks>
Inserts a poco into a table. If the poco has a property with the same name as the primary key, the id of the new record is assigned to it. Either way, the new id is returned.</remarks>
      <returns>
The auto allocated primary key of the new record, or null for non-auto-increment tables.</returns>
      <param name="tableName">
The name of the table to insert into.</param>
      <param name="primaryKeyName">
The name of the primary key column of the table.</param>
      <param name="autoIncrement">
True if the primary key is automatically allocated by the DB.</param>
      <param name="poco">
The POCO object that specifies the column values to be inserted.</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Insert(System.Object)">
      <summary>
Performs an SQL Insert.</summary>
      <remarks>
The name of the table, it's primary key and whether it's an auto-allocated primary key are retrieved from the POCO's attributes</remarks>
      <returns>
The auto allocated primary key of the new record, or null for non-auto-increment tables.</returns>
      <param name="poco">
The POCO object that specifies the column values to be inserted.</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object)">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected records</returns>
      <param name="tableName">
The name of the table to update</param>
      <param name="primaryKeyName">
The name of the primary key column of the table</param>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
      <param name="primaryKeyValue">
The primary key of the record to be updated</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="tableName">
The name of the table to update</param>
      <param name="primaryKeyName">
The name of the primary key column of the table</param>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
      <param name="primaryKeyValue">
The primary key of the record to be updated</param>
      <param name="columns">
The column names of the columns to be updated, or null for all</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object)">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="tableName">
The name of the table to update</param>
      <param name="primaryKeyName">
The name of the primary key column of the table</param>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="tableName">
The name of the table to update</param>
      <param name="primaryKeyName">
The name of the primary key column of the table</param>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
      <param name="columns">
The column names of the columns to be updated, or null for all</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Update(System.Object,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
      <param name="columns">
The column names of the columns to be updated, or null for all</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Update(System.Object)">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Update(System.Object,System.Object)">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
      <param name="primaryKeyValue">
The primary key of the record to be updated</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Update(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="poco">
The POCO object that specifies the column values to be updated</param>
      <param name="primaryKeyValue">
The primary key of the record to be updated</param>
      <param name="columns">
The column names of the columns to be updated, or null for all</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Update``1(System.String,System.Object[])">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="sql">
The SQL update and condition clause (ie: everything after "UPDATE tablename"</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Update``1(PetaPoco.Sql)">
      <summary>
Performs an SQL update</summary>
      <returns>
The number of affected rows</returns>
      <param name="sql">
An SQL builder object representing the SQL update and condition clause (ie: everything after "UPDATE tablename"</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Delete(System.String,System.String,System.Object)">
      <summary>
Performs and SQL Delete</summary>
      <returns>
The number of rows affected</returns>
      <param name="tableName">
The name of the table to delete from</param>
      <param name="primaryKeyName">
The name of the primary key column</param>
      <param name="poco">
The POCO object whose primary key value will be used to delete the row</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Delete(System.String,System.String,System.Object,System.Object)">
      <summary>
Performs and SQL Delete</summary>
      <returns>
The number of rows affected</returns>
      <param name="tableName">
The name of the table to delete from</param>
      <param name="primaryKeyName">
The name of the primary key column</param>
      <param name="poco">
The POCO object whose primary key value will be used to delete the row (or null to use the supplied primary key value)</param>
      <param name="primaryKeyValue">
The value of the primary key identifing the record to be deleted (or null, or get this value from the POCO instance)</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Delete(System.Object)">
      <summary>
Performs an SQL Delete</summary>
      <returns>
The number of rows affected</returns>
      <param name="poco">
The POCO object specifying the table name and primary key value of the row to be deleted</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Delete``1(System.Object)">
      <summary>
Performs an SQL Delete</summary>
      <param name="pocoOrPrimaryKey">
The value of the primary key of the row to delete</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Delete``1(System.String,System.Object[])">
      <summary>
Performs an SQL Delete</summary>
      <returns>
The number of affected rows</returns>
      <param name="sql">
The SQL condition clause identifying the row to delete (ie: everything after "DELETE FROM tablename"</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Delete``1(PetaPoco.Sql)">
      <summary>
Performs an SQL Delete</summary>
      <returns>
The number of affected rows</returns>
      <param name="sql">
An SQL builder object representing the SQL condition clause identifying the row to delete (ie: everything after "UPDATE tablename"</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.IsNew(System.String,System.Object)">
      <summary>
Check if a poco represents a new row</summary>
      <remarks>
This method simply tests if the POCO's primary key column property has been set to something non-zero.</remarks>
      <returns>
True if the POCO represents a record already in the database</returns>
      <param name="primaryKeyName">
The name of the primary key column</param>
      <param name="poco">
The object instance whose "newness" is to be tested</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.IsNew(System.Object)">
      <summary>
Check if a poco represents a new row</summary>
      <remarks>
This method simply tests if the POCO's primary key column property has been set to something non-zero.</remarks>
      <returns>
True if the POCO represents a record already in the database</returns>
      <param name="poco">
The object instance whose "newness" is to be tested</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Save(System.String,System.String,System.Object)">
      <summary>
Saves a POCO by either performing either an SQL Insert or SQL Update</summary>
      <param name="tableName">
The name of the table to be updated</param>
      <param name="primaryKeyName">
The name of the primary key column</param>
      <param name="poco">
The POCO object to be saved</param>
    </member>
    <member name="M:PetaPoco.IAlterPoco.Save(System.Object)">
      <summary>
Saves a POCO by either performing either an SQL Insert or SQL Update</summary>
      <param name="poco">
The POCO object to be saved</param>
    </member>
    <member name="M:PetaPoco.IBuildConfigurationSettings.SetSetting(System.String,System.Object)">
      <summary>
Sets the setting against the specified key.</summary>
      <param name="key">
The setting's key.</param>
      <param name="value">
The setting's value.</param>
    </member>
    <member name="M:PetaPoco.IBuildConfigurationSettings.TryGetSetting``1(System.String,System.Action{``0},System.Action)">
      <summary>
Tries to get the setting and calls the <paramref name="setSetting" /> to set the value if found.</summary>
      <param name="key">
The setting's key.</param>
      <param name="setSetting">
The set setting callback.</param>
      <param name="onFail">
The on fail callback, called when no setting can be set.</param>
    </member>
    <member name="P:PetaPoco.IDatabase.DefaultMapper">
      <summary>
Gets the default mapper. (Default is <see cref="ConventionMapper" />)</summary>
      <value>
The default mapper.</value>
    </member>
    <member name="P:PetaPoco.IDatabase.LastSQL">
      <summary>
Gets the SQL of the last executed statement</summary>
      <value>
The last executed SQL.</value>
    </member>
    <member name="P:PetaPoco.IDatabase.LastArgs">
      <summary>
Gets the arguments to the last execute statement</summary>
      <value>
The last executed SQL arguments.</value>
    </member>
    <member name="P:PetaPoco.IDatabase.LastCommand">
      <summary>
Gets a formatted string describing the last executed SQL statement and it's argument values</summary>
      <value>
The formatted string.</value>
    </member>
    <member name="P:PetaPoco.IDatabase.EnableAutoSelect">
      <summary>
Gets or sets the enable auto select. (Default is True)</summary>
      <remarks>
When set to true, PetaPoco will automatically create the "SELECT columns" section of the query for any query which is found to require them.</remarks>
      <value>
True, if auto select is enabled; Else, false.</value>
    </member>
    <member name="P:PetaPoco.IDatabase.EnableNamedParams">
      <summary>
Gets the flag for whether named params are enabled. (Default is True)</summary>
      <remarks>
When set to true, parameters can be named ?myparam and populated from properties of the passed in argument values.</remarks>
      <value>
True, if named parameters are enabled; Else, false.</value>
    </member>
    <member name="P:PetaPoco.IDatabase.CommandTimeout">
      <summary>
Sets the timeout value, in seconds, which PetaPoco applies to all <see cref="IDbCommand.CommandTimeout" />. (Default is 0)</summary>
      <remarks>
If the current value is zero PetaPoco will not set the command timeout, and therefor, the .net default (30 seconds) will be in affect.</remarks>
      <value>
The current command timeout.</value>
    </member>
    <member name="P:PetaPoco.IDatabase.OneTimeCommandTimeout">
      <summary>
Sets the timeout value for the next (and only next) SQL statement.</summary>
      <remarks>
This is a one-time settings, which after use, will return the <see cref="CommandTimeout" /> setting.</remarks>
      <value>
The one time command timeout.</value>
    </member>
    <member name="P:PetaPoco.IDatabase.Provider">
      <summary>
Gets the current <seealso cref="Provider" />.</summary>
      <value>
The current database provider.</value>
      <seealso cref="Provider">
Provider</seealso>
    </member>
    <member name="P:PetaPoco.IDatabase.ConnectionString">
      <summary>
Gets the connection string.</summary>
      <value>
The connection string.</value>
    </member>
    <member name="P:PetaPoco.IDatabase.IsolationLevel">
      <summary>
Gets or sets the transaction isolation level.</summary>
      <remarks>
When value is null, the underlying providers default isolation level is used.</remarks>
    </member>
    <member name="M:PetaPoco.IDatabase.GetTransaction">
      <summary>
Starts or continues a transaction.</summary>
      <remarks>
This method makes management of calls to Begin/End/CompleteTransaction easier. The usage pattern for this should be: using (var tx = db.GetTransaction()) { // Do stuff db.Update(...); // Mark the transaction as complete tx.Complete(); } Transactions can be nested but they must all be completed otherwise the entire transaction is aborted.</remarks>
      <returns>
An ITransaction reference that must be Completed or disposed</returns>
    </member>
    <member name="M:PetaPoco.IDatabase.BeginTransaction">
      <summary>
Starts a transaction scope, see GetTransaction() for recommended usage</summary>
    </member>
    <member name="M:PetaPoco.IDatabase.AbortTransaction">
      <summary>
Aborts the entire outer most transaction scope</summary>
      <remarks>
Called automatically by Transaction.Dispose() if the transaction wasn't completed.</remarks>
    </member>
    <member name="M:PetaPoco.IDatabase.CompleteTransaction">
      <summary>
Marks the current transaction scope as complete.</summary>
    </member>
    <member name="M:PetaPoco.IExecute.Execute(System.String,System.Object[])">
      <summary>
Executes a non-query command</summary>
      <returns>
The number of rows affected</returns>
      <param name="sql">
The SQL statement to execute</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IExecute.Execute(PetaPoco.Sql)">
      <summary>
Executes a non-query command</summary>
      <returns>
The number of rows affected</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IExecute.ExecuteScalar``1(System.String,System.Object[])">
      <summary>
Executes a query and return the first column of the first row in the result set.</summary>
      <returns>
The scalar value cast to T</returns>
      <param name="sql">
The SQL query to execute</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IExecute.ExecuteScalar``1(PetaPoco.Sql)">
      <summary>
Executes a query and return the first column of the first row in the result set.</summary>
      <returns>
The scalar value cast to T</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IHideObjectMethods.Equals(System.Object)">
      <summary>
Determines whether the specified <see cref="System.Object" /> is equal to this instance.</summary>
      <returns>
<c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
      <param name="other">
The <see cref="System.Object" /> to compare with this instance.</param>
    </member>
    <member name="M:PetaPoco.IHideObjectMethods.GetHashCode">
      <summary>
Returns a hash code for this instance.</summary>
      <returns>
A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:PetaPoco.IHideObjectMethods.GetType">
      <summary>
Gets the type.</summary>
      <returns>
The type of the object.</returns>
    </member>
    <member name="M:PetaPoco.IHideObjectMethods.ToString">
      <summary>
Returns a <see cref="System.String" /> that represents this instance.</summary>
      <returns>
A <see cref="System.String" /> that represents this instance.</returns>
    </member>
    <member name="M:PetaPoco.IQuery.Query``1(System.String,System.Object[])">
      <summary>
Runs an SQL query, returning the results as an IEnumerable collection</summary>
      <remarks>
For some DB providers, care should be taken to not start a new Query before finishing with and disposing the previous one. In cases where this is an issue, consider using Fetch which returns the results as a List rather than an IEnumerable.</remarks>
      <returns>
An enumerable collection of result records</returns>
      <param name="sql">
The SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``1(PetaPoco.Sql)">
      <summary>
Runs an SQL query, returning the results as an IEnumerable collection</summary>
      <remarks>
For some DB providers, care should be taken to not start a new Query before finishing with and disposing the previous one. In cases where this is an issue, consider using Fetch which returns the results as a List rather than an IEnumerable.</remarks>
      <returns>
An enumerable collection of result records</returns>
      <param name="sql">
An SQL builder object representing the base SQL query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``3(System.Func{T1,T2,``0},System.String,System.Object[])">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``4(System.Func{T1,T2,T3,``0},System.String,System.Object[])">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``5(System.Func{T1,T2,T3,T4,``0},System.String,System.Object[])">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``3(System.Func{T1,T2,``0},PetaPoco.Sql)">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``4(System.Func{T1,T2,T3,``0},PetaPoco.Sql)">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``5(System.Func{T1,T2,T3,T4,``0},PetaPoco.Sql)">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``2(System.String,System.Object[])">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``3(System.String,System.Object[])">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``4(System.String,System.Object[])">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``2(PetaPoco.Sql)">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``3(PetaPoco.Sql)">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``4(PetaPoco.Sql)">
      <summary>
Perform a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Query``1(System.Type[],System.Object,System.String,System.Object[])">
      <summary>
Performs a multi-poco query</summary>
      <returns>
A collection of POCO's as an IEnumerable</returns>
      <param name="types">
An array of Types representing the POCO types of the returned result set.</param>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``1(System.String,System.Object[])">
      <summary>
Runs a query and returns the result set as a typed list</summary>
      <returns>
A List holding the results of the query</returns>
      <param name="sql">
The SQL query to execute</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``1(PetaPoco.Sql)">
      <summary>
Runs a query and returns the result set as a typed list</summary>
      <returns>
A List holding the results of the query</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,System.String,System.Object[],System.String,System.Object[])">
      <summary>
Retrieves a page of records and the total number of available records</summary>
      <remarks>
This method allows separate SQL statements to be explicitly provided for the two parts of the page query. The page and itemsPerPage parameters are not used directly and are used simply to populate the returned Page object.</remarks>
      <returns>
A Page of results</returns>
      <param name="page">
The 1 based page number to retrieve</param>
      <param name="itemsPerPage">
The number of records per page</param>
      <param name="sqlCount">
The SQL to retrieve the total number of records</param>
      <param name="countArgs">
Arguments to any embedded parameters in the sqlCount statement</param>
      <param name="sqlPage">
The SQL To retrieve a single page of results</param>
      <param name="pageArgs">
Arguments to any embedded parameters in the sqlPage statement</param>
    </member>
    <member name="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>
Retrieves a page of records and the total number of available records</summary>
      <remarks>
PetaPoco will automatically modify the supplied SELECT statement to only retrieve the records for the specified page. It will also execute a second query to retrieve the total number of records in the result set.</remarks>
      <returns>
A Page of results</returns>
      <param name="page">
The 1 based page number to retrieve</param>
      <param name="itemsPerPage">
The number of records per page</param>
      <param name="sql">
The base SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,PetaPoco.Sql)">
      <summary>
Retrieves a page of records and the total number of available records</summary>
      <remarks>
PetaPoco will automatically modify the supplied SELECT statement to only retrieve the records for the specified page. It will also execute a second query to retrieve the total number of records in the result set.</remarks>
      <returns>
A Page of results</returns>
      <param name="page">
The 1 based page number to retrieve</param>
      <param name="itemsPerPage">
The number of records per page</param>
      <param name="sql">
An SQL builder object representing the base SQL query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,PetaPoco.Sql,PetaPoco.Sql)">
      <summary>
Retrieves a page of records and the total number of available records</summary>
      <remarks>
This method allows separate SQL statements to be explicitly provided for the two parts of the page query. The page and itemsPerPage parameters are not used directly and are used simply to populate the returned Page object.</remarks>
      <returns>
A Page of results</returns>
      <param name="page">
The 1 based page number to retrieve</param>
      <param name="itemsPerPage">
The number of records per page</param>
      <param name="sqlCount">
An SQL builder object representing the SQL to retrieve the total number of records</param>
      <param name="sqlPage">
An SQL builder object representing the SQL to retrieve a single page of results</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``1(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>
Retrieves a page of records (without the total count)</summary>
      <remarks>
PetaPoco will automatically modify the supplied SELECT statement to only retrieve the records for the specified page.</remarks>
      <returns>
A List of results</returns>
      <param name="page">
The 1 based page number to retrieve</param>
      <param name="itemsPerPage">
The number of records per page</param>
      <param name="sql">
The base SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``1(System.Int64,System.Int64,PetaPoco.Sql)">
      <summary>
Retrieves a page of records (without the total count)</summary>
      <remarks>
PetaPoco will automatically modify the supplied SELECT statement to only retrieve the records for the specified page.</remarks>
      <returns>
A List of results</returns>
      <param name="page">
The 1 based page number to retrieve</param>
      <param name="itemsPerPage">
The number of records per page</param>
      <param name="sql">
An SQL builder object representing the base SQL query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.SkipTake``1(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>
Retrieves a range of records from result set</summary>
      <remarks>
PetaPoco will automatically modify the supplied SELECT statement to only retrieve the records for the specified range.</remarks>
      <returns>
A List of results</returns>
      <param name="skip">
The number of rows at the start of the result set to skip over</param>
      <param name="take">
The number of rows to retrieve</param>
      <param name="sql">
The base SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.IQuery.SkipTake``1(System.Int64,System.Int64,PetaPoco.Sql)">
      <summary>
Retrieves a range of records from result set</summary>
      <remarks>
PetaPoco will automatically modify the supplied SELECT statement to only retrieve the records for the specified range.</remarks>
      <returns>
A List of results</returns>
      <param name="skip">
The number of rows at the start of the result set to skip over</param>
      <param name="take">
The number of rows to retrieve</param>
      <param name="sql">
An SQL builder object representing the base SQL query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Exists``1(System.Object)">
      <summary>
Checks for the existence of a row with the specified primary key value.</summary>
      <returns>
True if a record with the specified primary key value exists.</returns>
      <param name="primaryKey">
The primary key value to look for</param>
    </member>
    <member name="M:PetaPoco.IQuery.Exists``1(System.String,System.Object[])">
      <summary>
Checks for the existence of a row matching the specified condition</summary>
      <returns>
True if a record matching the condition is found.</returns>
      <param name="sqlCondition">
The SQL expression to be tested for (ie: the WHERE expression)</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.IQuery.Single``1(System.Object)">
      <summary>
Returns the record with the specified primary key value</summary>
      <remarks>
Throws an exception if there are zero or more than one record with the specified primary key value.</remarks>
      <returns>
The single record matching the specified primary key value</returns>
      <param name="primaryKey">
The primary key value of the record to fetch</param>
    </member>
    <member name="M:PetaPoco.IQuery.Single``1(System.String,System.Object[])">
      <summary>
Runs a query that should always return a single row.</summary>
      <remarks>
Throws an exception if there are zero or more than one matching record</remarks>
      <returns>
The single record matching the specified primary key value</returns>
      <param name="sql">
The SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.IQuery.Single``1(PetaPoco.Sql)">
      <summary>
Runs a query that should always return a single row.</summary>
      <remarks>
Throws an exception if there are zero or more than one matching record</remarks>
      <returns>
The single record matching the specified primary key value</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.SingleOrDefault``1(PetaPoco.Sql)">
      <summary>
Runs a query that should always return either a single row, or no rows</summary>
      <returns>
The single record matching the specified primary key value, or default(T) if no matching rows</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.SingleOrDefault``1(System.Object)">
      <summary>
Returns the record with the specified primary key value, or the default value if not found</summary>
      <remarks>
If there are no records with the specified primary key value, default(T) (typically null) is returned.</remarks>
      <returns>
The single record matching the specified primary key value</returns>
      <param name="primaryKey">
The primary key value of the record to fetch</param>
    </member>
    <member name="M:PetaPoco.IQuery.SingleOrDefault``1(System.String,System.Object[])">
      <summary>
Runs a query that should always return either a single row, or no rows</summary>
      <returns>
The single record matching the specified primary key value, or default(T) if no matching rows</returns>
      <param name="sql">
The SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.IQuery.First``1(System.String,System.Object[])">
      <summary>
Runs a query that should always return at least one return</summary>
      <returns>
The first record in the result set</returns>
      <param name="sql">
The SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.IQuery.First``1(PetaPoco.Sql)">
      <summary>
Runs a query that should always return at least one return</summary>
      <returns>
The first record in the result set</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.FirstOrDefault``1(System.String,System.Object[])">
      <summary>
Runs a query and returns the first record, or the default value if no matching records</summary>
      <returns>
The first record in the result set, or default(T) if no matching rows</returns>
      <param name="sql">
The SQL query</param>
      <param name="args">
Arguments to any embedded parameters in the SQL statement</param>
    </member>
    <member name="M:PetaPoco.IQuery.FirstOrDefault``1(PetaPoco.Sql)">
      <summary>
Runs a query and returns the first record, or the default value if no matching records</summary>
      <returns>
The first record in the result set, or default(T) if no matching rows</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``3(System.Func{T1,T2,``0},System.String,System.Object[])">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``4(System.Func{T1,T2,T3,``0},System.String,System.Object[])">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``5(System.Func{T1,T2,T3,T4,``0},System.String,System.Object[])">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``3(System.Func{T1,T2,``0},PetaPoco.Sql)">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``4(System.Func{T1,T2,T3,``0},PetaPoco.Sql)">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``5(System.Func{T1,T2,T3,T4,``0},PetaPoco.Sql)">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="cb">
A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``2(System.String,System.Object[])">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``3(System.String,System.Object[])">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``4(System.String,System.Object[])">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="sql">
The SQL query to be executed</param>
      <param name="args">
Arguments to any embedded parameters in the SQL</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``2(PetaPoco.Sql)">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``3(PetaPoco.Sql)">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="M:PetaPoco.IQuery.Fetch``4(PetaPoco.Sql)">
      <summary>
Perform a multi-poco fetch</summary>
      <returns>
A collection of POCO's as a List</returns>
      <param name="sql">
An SQL builder object representing the query and it's arguments</param>
    </member>
    <member name="T:PetaPoco.OracleProvider">
    </member>
    <member name="M:PetaPoco.OracleProvider.#ctor">
    </member>
    <member name="M:PetaPoco.OracleProvider.CreateConnection">
    </member>
    <member name="M:PetaPoco.OracleProvider.CreateCommand">
    </member>
    <member name="M:PetaPoco.OracleProvider.TypeFromAssembly(System.String,System.String)">
      <param name="typeName">
</param>
      <param name="assemblyName">
</param>
    </member>
    <member name="T:PetaPoco.ColumnAttribute">
      <summary>
Represents an attribute which can decorate a Poco property to mark the property as a column. It may also optionally supply the DB column name.</summary>
    </member>
    <member name="P:PetaPoco.ColumnAttribute.Name">
      <summary>
The column name.</summary>
      <value>
The column name.</value>
    </member>
    <member name="P:PetaPoco.ColumnAttribute.ForceToUtc">
      <summary>
The column name.</summary>
      <value>
The column name.</value>
    </member>
    <member name="M:PetaPoco.ColumnAttribute.#ctor">
      <summary>
Constructs a new instance of the <seealso cref="ColumnAttribute" />.</summary>
      <seealso cref="ColumnAttribute">
ColumnAttribute</seealso>
    </member>
    <member name="M:PetaPoco.ColumnAttribute.#ctor(System.String)">
      <summary>
Constructs a new instance of the <seealso cref="ColumnAttribute" />.</summary>
      <seealso cref="ColumnAttribute">
ColumnAttribute</seealso>
      <param name="name">
The name of the column.</param>
    </member>
    <member name="T:PetaPoco.ExplicitColumnsAttribute">
      <summary>
Represents the attribute which decorates a poco class to state all columns must be explicitly mapped using either a <seealso cref="ColumnAttribute" /> or <seealso cref="ResultColumnAttribute" />.</summary>
      <seealso cref="ColumnAttribute">
ColumnAttribute</seealso>
      <seealso cref="ResultColumnAttribute">
ResultColumnAttribute</seealso>
    </member>
    <member name="T:PetaPoco.IgnoreAttribute">
      <summary>
Represents an attribute which can decorate a Poco property to ensure PetaPoco does not map column, and therefore ignores the column.</summary>
    </member>
    <member name="T:PetaPoco.PrimaryKeyAttribute">
      <summary>
Is an attribute, which when applied to a Poco class, specifies primary key column. Additionally, specifies whether the column is auto incrementing and the optional sequence name for Oracle sequence columns.</summary>
    </member>
    <member name="P:PetaPoco.PrimaryKeyAttribute.Value">
      <summary>
The column name.</summary>
      <value>
The column name.</value>
    </member>
    <member name="P:PetaPoco.PrimaryKeyAttribute.SequenceName">
      <summary>
The sequence name.</summary>
      <value>
The sequence name.</value>
    </member>
    <member name="P:PetaPoco.PrimaryKeyAttribute.AutoIncrement">
      <summary>
A flag which specifies if the primary key is auto incrementing.</summary>
      <value>
True if the primary key is auto incrementing; else, False.</value>
    </member>
    <member name="M:PetaPoco.PrimaryKeyAttribute.#ctor(System.String)">
      <summary>
Constructs a new instance of the <seealso cref="PrimaryKeyAttribute" />.</summary>
      <seealso cref="PrimaryKeyAttribute">
PrimaryKeyAttribute</seealso>
      <param name="primaryKey">
The name of the primary key column.</param>
    </member>
    <member name="T:PetaPoco.ResultColumnAttribute">
      <summary>
Represents an attribute which can decorate a poco property as a result only column. A result only column is a column that is only populated in queries and is not used for updates or inserts operations.</summary>
    </member>
    <member name="M:PetaPoco.ResultColumnAttribute.#ctor">
      <summary>
Constructs a new instance of the <seealso cref="ResultColumnAttribute" />.</summary>
      <seealso cref="ResultColumnAttribute">
ResultColumnAttribute</seealso>
    </member>
    <member name="M:PetaPoco.ResultColumnAttribute.#ctor(System.String)">
      <summary>
Constructs a new instance of the <seealso cref="ResultColumnAttribute" />.</summary>
      <seealso cref="ResultColumnAttribute">
ResultColumnAttribute</seealso>
      <param name="name">
The name of the DB column.</param>
    </member>
    <member name="T:PetaPoco.TableNameAttribute">
      <summary>
Represents an attribute, which when applied to a Poco class, specifies the the DB table name which it maps to</summary>
    </member>
    <member name="P:PetaPoco.TableNameAttribute.Value">
      <summary>
The table nane of the database that this entity maps to.</summary>
      <value>
The table nane of the database that this entity maps to.</value>
    </member>
    <member name="M:PetaPoco.TableNameAttribute.#ctor(System.String)">
      <summary>
Constructs a new instance of the <seealso cref="TableNameAttribute" />.</summary>
      <seealso cref="TableNameAttribute">
TableNameAttribute</seealso>
      <param name="tableName">
The table nane of the database that this entity maps to.</param>
    </member>
    <member name="T:PetaPoco.AnsiString">
      <summary>
Wrap strings in an instance of this class to force use of DBType.AnsiString</summary>
    </member>
    <member name="P:PetaPoco.AnsiString.Value">
      <summary>
The string value</summary>
    </member>
    <member name="M:PetaPoco.AnsiString.#ctor(System.String)">
      <summary>
Constructs an AnsiString</summary>
      <param name="str">
The C# string to be converted to ANSI before being passed to the DB</param>
    </member>
    <member name="T:PetaPoco.ColumnInfo">
      <summary>
Hold information about a column in the database.</summary>
      <remarks>
Typically ColumnInfo is automatically populated from the attributes on a POCO object and it's properties. It can however also be returned from the IMapper interface to provide your owning bindings between the DB and your POCOs.</remarks>
    </member>
    <member name="P:PetaPoco.ColumnInfo.ColumnName">
      <summary>
The SQL name of the column</summary>
    </member>
    <member name="P:PetaPoco.ColumnInfo.ResultColumn">
      <summary>
True if this column returns a calculated value from the database and shouldn't be used in Insert and Update operations.</summary>
    </member>
    <member name="P:PetaPoco.ColumnInfo.ForceToUtc">
      <summary>
True if time and date values returned through this column should be forced to UTC DateTimeKind. (no conversion is applied - the Kind of the DateTime property is simply set to DateTimeKind.Utc instead of DateTimeKind.Unknown.</summary>
    </member>
    <member name="M:PetaPoco.ColumnInfo.FromProperty(System.Reflection.PropertyInfo)">
      <summary>
Creates and populates a ColumnInfo from the attributes of a POCO property.</summary>
      <returns>
A ColumnInfo instance</returns>
      <param name="propertyInfo">
The property whose column info is required</param>
    </member>
    <member name="T:PetaPoco.ConventionMapper">
      <summary>
Represents a configurable convention mapper.</summary>
      <remarks>
By default this mapper replaces <see cref="StandardMapper" /> without change, which means backwards compatibility is kept.</remarks>
    </member>
    <member name="P:PetaPoco.ConventionMapper.GetSequenceName">
      <summary>
Gets or sets the get sequence name logic.</summary>
    </member>
    <member name="P:PetaPoco.ConventionMapper.InflectColumnName">
      <summary>
Gets or sets the inflect column name logic.</summary>
    </member>
    <member name="P:PetaPoco.ConventionMapper.InflectTableName">
      <summary>
Gets or sets the inflect table name logic.</summary>
    </member>
    <member name="P:PetaPoco.ConventionMapper.IsPrimaryKeyAutoIncrement">
      <summary>
Gets or sets the is primary key auto increment logic.</summary>
    </member>
    <member name="P:PetaPoco.ConventionMapper.MapColumn">
      <summary>
Gets or sets the map column logic.</summary>
    </member>
    <member name="P:PetaPoco.ConventionMapper.MapPrimaryKey">
      <summary>
Gets or set the map primary key logic.</summary>
    </member>
    <member name="P:PetaPoco.ConventionMapper.MapTable">
      <summary>
Gets or sets the map table logic.</summary>
    </member>
    <member name="P:PetaPoco.ConventionMapper.FromDbConverter">
      <summary>
Gets or sets the from db convert logic.</summary>
    </member>
    <member name="P:PetaPoco.ConventionMapper.ToDbConverter">
      <summary>
Gets or sets the to db converter logic.</summary>
    </member>
    <member name="M:PetaPoco.ConventionMapper.#ctor">
      <summary>
Constructs a new instance of convention mapper.</summary>
    </member>
    <member name="M:PetaPoco.ConventionMapper.GetTableInfo(System.Type)">
      <summary>
Get information about the table associated with a POCO class</summary>
      <remarks>
This method must return a valid TableInfo. To create a TableInfo from a POCO's attributes, use TableInfo.FromPoco</remarks>
      <returns>
A TableInfo instance</returns>
      <param name="pocoType">
The poco type.</param>
    </member>
    <member name="M:PetaPoco.ConventionMapper.GetColumnInfo(System.Reflection.PropertyInfo)">
      <summary>
Get information about the column associated with a property of a POCO</summary>
      <remarks>
To create a ColumnInfo from a property's attributes, use PropertyInfo.FromProperty</remarks>
      <returns>
A reference to a ColumnInfo instance, or null to ignore this property</returns>
      <param name="pocoProperty">
The PropertyInfo of the property being queried</param>
    </member>
    <member name="M:PetaPoco.ConventionMapper.GetFromDbConverter(System.Reflection.PropertyInfo,System.Type)">
      <summary>
Supply a function to convert a database value to the correct property value</summary>
      <returns>
A Func that can do the conversion, or null for no conversion</returns>
      <param name="targetProperty">
The target property</param>
      <param name="sourceType">
The type of data returned by the DB</param>
    </member>
    <member name="M:PetaPoco.ConventionMapper.GetToDbConverter(System.Reflection.PropertyInfo)">
      <summary>
Supply a function to convert a property value into a database value</summary>
      <remarks>
This conversion is only used for converting values from POCO's that are being Inserted or Updated. Conversion is not available for parameter values passed directly to queries.</remarks>
      <returns>
A Func that can do the conversion</returns>
      <param name="sourceProperty">
The property to be converted</param>
    </member>
    <member name="T:PetaPoco.DatabaseProvider">
      <summary>
Base class for DatabaseType handlers - provides default/common handling for different database engines</summary>
    </member>
    <member name="M:PetaPoco.DatabaseProvider.GetFactory">
      <summary>
Gets the DbProviderFactory for this database provider.</summary>
      <returns>
The provider factory.</returns>
    </member>
    <member name="P:PetaPoco.DatabaseProvider.HasNativeGuidSupport">
      <summary>
Gets a flag for whether the DB has native support for GUID/UUID.</summary>
    </member>
    <member name="P:PetaPoco.DatabaseProvider.PagingUtility">
      <summary>
Gets the <seealso cref="IPagingHelper" /> this provider supplies.</summary>
      <seealso cref="IPagingHelper">
IPagingHelper</seealso>
    </member>
    <member name="M:PetaPoco.DatabaseProvider.EscapeTableName(System.String)">
      <summary>
Escape a tablename into a suitable format for the associated database provider.</summary>
      <returns>
The escaped table name</returns>
      <param name="tableName">
The name of the table (as specified by the client program, or as attributes on the associated POCO class.</param>
    </member>
    <member name="M:PetaPoco.DatabaseProvider.EscapeSqlIdentifier(System.String)">
      <summary>
Escape and arbitary SQL identifier into a format suitable for the associated database provider</summary>
      <returns>
The escaped identifier</returns>
      <param name="sqlIdentifier">
The SQL identifier to be escaped</param>
    </member>
    <member name="M:PetaPoco.DatabaseProvider.GetParameterPrefix(System.String)">
      <summary>
Returns the prefix used to delimit parameters in SQL query strings.</summary>
      <returns>
The providers character for prefixing a query parameter.</returns>
      <param name="connectionString">
The connection string.</param>
    </member>
    <member name="M:PetaPoco.DatabaseProvider.MapParameterValue(System.Object)">
      <summary>
Converts a supplied C# object value into a value suitable for passing to the database</summary>
      <returns>
The converted value</returns>
      <param name="value">
The value to convert</param>
    </member>
    <member name="M:PetaPoco.DatabaseProvider.PreExecute(System.Data.IDbCommand)">
      <summary>
Called immediately before a command is executed, allowing for modification of the IDbCommand before it's passed to the database provider</summary>
      <param name="cmd">
</param>
    </member>
    <member name="M:PetaPoco.DatabaseProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.SQLParts,System.Object[]@)">
      <summary>
Builds an SQL query suitable for performing page based queries to the database</summary>
      <returns>
The final SQL query that should be executed.</returns>
      <param name="skip">
The number of rows that should be skipped by the query</param>
      <param name="take">
The number of rows that should be retruend by the query</param>
      <param name="parts">
The original SQL query after being parsed into it's component parts</param>
      <param name="args">
Arguments to any embedded parameters in the SQL query</param>
    </member>
    <member name="M:PetaPoco.DatabaseProvider.GetExistsSql">
      <summary>
Returns an SQL Statement that can check for the existence of a row in the database.</summary>
    </member>
    <member name="M:PetaPoco.DatabaseProvider.GetAutoIncrementExpression(PetaPoco.TableInfo)">
      <summary>
Return an SQL expression that can be used to populate the primary key column of an auto-increment column.</summary>
      <remarks>
See the Oracle database type for an example of how this method is used.</remarks>
      <returns>
An SQL expressions</returns>
      <param name="tableInfo">
Table info describing the table</param>
    </member>
    <member name="M:PetaPoco.DatabaseProvider.GetInsertOutputClause(System.String)">
      <summary>
Returns an SQL expression that can be used to specify the return value of auto incremented columns.</summary>
      <remarks>
See the SQLServer database provider for an example of how this method is used.</remarks>
      <returns>
An expression describing how to return the new primary key value</returns>
      <param name="primaryKeyName">
The primary key of the row being inserted.</param>
    </member>
    <member name="M:PetaPoco.DatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
      <summary>
Performs an Insert operation</summary>
      <returns>
The ID of the newly inserted record</returns>
      <param name="database">
The calling Database object</param>
      <param name="cmd">
The insert command to be executed</param>
      <param name="primaryKeyName">
The primary key of the table being inserted into</param>
    </member>
    <member name="M:PetaPoco.IMapper.GetTableInfo(System.Type)">
      <summary>
Get information about the table associated with a POCO class</summary>
      <remarks>
This method must return a valid TableInfo. To create a TableInfo from a POCO's attributes, use TableInfo.FromPoco</remarks>
      <returns>
A TableInfo instance</returns>
      <param name="pocoType">
The poco type.</param>
    </member>
    <member name="M:PetaPoco.IMapper.GetColumnInfo(System.Reflection.PropertyInfo)">
      <summary>
Get information about the column associated with a property of a POCO</summary>
      <remarks>
To create a ColumnInfo from a property's attributes, use PropertyInfo.FromProperty</remarks>
      <returns>
A reference to a ColumnInfo instance, or null to ignore this property</returns>
      <param name="pocoProperty">
The PropertyInfo of the property being queried</param>
    </member>
    <member name="M:PetaPoco.IMapper.GetFromDbConverter(System.Reflection.PropertyInfo,System.Type)">
      <summary>
Supply a function to convert a database value to the correct property value</summary>
      <returns>
A Func that can do the conversion, or null for no conversion</returns>
      <param name="targetProperty">
The target property</param>
      <param name="sourceType">
The type of data returned by the DB</param>
    </member>
    <member name="M:PetaPoco.IMapper.GetToDbConverter(System.Reflection.PropertyInfo)">
      <summary>
Supply a function to convert a property value into a database value</summary>
      <remarks>
This conversion is only used for converting values from POCO's that are being Inserted or Updated. Conversion is not available for parameter values passed directly to queries.</remarks>
      <returns>
A Func that can do the conversion</returns>
      <param name="sourceProperty">
The property to be converted</param>
    </member>
    <member name="P:PetaPoco.IProvider.PagingUtility">
      <summary>
Gets the <seealso cref="IPagingHelper" /> this provider supplies.</summary>
      <seealso cref="IPagingHelper">
IPagingHelper</seealso>
    </member>
    <member name="P:PetaPoco.IProvider.HasNativeGuidSupport">
      <summary>
Gets a flag for whether the DB has native support for GUID/UUID.</summary>
    </member>
    <member name="M:PetaPoco.IProvider.EscapeTableName(System.String)">
      <summary>
Escape a tablename into a suitable format for the associated database provider.</summary>
      <returns>
The escaped table name</returns>
      <param name="tableName">
The name of the table (as specified by the client program, or as attributes on the associated POCO class.</param>
    </member>
    <member name="M:PetaPoco.IProvider.EscapeSqlIdentifier(System.String)">
      <summary>
Escape and arbitary SQL identifier into a format suitable for the associated database provider</summary>
      <returns>
The escaped identifier</returns>
      <param name="sqlIdentifier">
The SQL identifier to be escaped</param>
    </member>
    <member name="M:PetaPoco.IProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.SQLParts,System.Object[]@)">
      <summary>
Builds an SQL query suitable for performing page based queries to the database</summary>
      <returns>
The final SQL query that should be executed.</returns>
      <param name="skip">
The number of rows that should be skipped by the query</param>
      <param name="take">
The number of rows that should be retruend by the query</param>
      <param name="parts">
The original SQL query after being parsed into it's component parts</param>
      <param name="args">
Arguments to any embedded parameters in the SQL query</param>
    </member>
    <member name="M:PetaPoco.IProvider.MapParameterValue(System.Object)">
      <summary>
Converts a supplied C# object value into a value suitable for passing to the database</summary>
      <returns>
The converted value</returns>
      <param name="value">
The value to convert</param>
    </member>
    <member name="M:PetaPoco.IProvider.PreExecute(System.Data.IDbCommand)">
      <summary>
Called immediately before a command is executed, allowing for modification of the IDbCommand before it's passed to the database provider</summary>
      <param name="cmd">
</param>
    </member>
    <member name="M:PetaPoco.IProvider.GetExistsSql">
      <summary>
Returns an SQL Statement that can check for the existence of a row in the database.</summary>
    </member>
    <member name="M:PetaPoco.IProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
      <summary>
Performs an Insert operation</summary>
      <returns>
The ID of the newly inserted record</returns>
      <param name="database">
The calling Database object</param>
      <param name="cmd">
The insert command to be executed</param>
      <param name="primaryKeyName">
The primary key of the table being inserted into</param>
    </member>
    <member name="M:PetaPoco.IProvider.GetInsertOutputClause(System.String)">
      <summary>
Returns an SQL expression that can be used to specify the return value of auto incremented columns.</summary>
      <remarks>
See the SQLServer database provider for an example of how this method is used.</remarks>
      <returns>
An expression describing how to return the new primary key value</returns>
      <param name="primaryKeyName">
The primary key of the row being inserted.</param>
    </member>
    <member name="M:PetaPoco.IProvider.GetParameterPrefix(System.String)">
      <summary>
Returns the prefix used to delimit parameters in SQL query strings.</summary>
      <returns>
The providers character for prefixing a query parameter.</returns>
      <param name="connectionString">
The connection string.</param>
    </member>
    <member name="M:PetaPoco.IProvider.GetAutoIncrementExpression(PetaPoco.TableInfo)">
      <summary>
Return an SQL expression that can be used to populate the primary key column of an auto-increment column.</summary>
      <remarks>
See the Oracle database type for an example of how this method is used.</remarks>
      <returns>
An SQL expressions</returns>
      <param name="tableInfo">
Table info describing the table</param>
    </member>
    <member name="M:PetaPoco.IProvider.GetFactory">
    </member>
    <member name="M:PetaPoco.ITransaction.Complete">
      <summary>
Completes the transaction. Not calling complete will cause the transaction to rollback on dispose.</summary>
    </member>
    <member name="T:PetaPoco.Mappers">
      <summary>
This static manages registation of IMapper instances with PetaPoco</summary>
    </member>
    <member name="M:PetaPoco.Mappers.Register(System.Reflection.Assembly,PetaPoco.IMapper)">
      <summary>
Registers a mapper for all types in a specific assembly</summary>
      <param name="assembly">
The assembly whose types are to be managed by this mapper</param>
      <param name="mapper">
The IMapper implementation</param>
    </member>
    <member name="M:PetaPoco.Mappers.Register(System.Type,PetaPoco.IMapper)">
      <summary>
Registers a mapper for a single POCO type</summary>
      <param name="type">
The type to be managed by this mapper</param>
      <param name="mapper">
The IMapper implementation</param>
    </member>
    <member name="M:PetaPoco.Mappers.Revoke(System.Reflection.Assembly)">
      <summary>
Remove all mappers for all types in a specific assembly</summary>
      <param name="assembly">
The assembly whose mappers are to be revoked</param>
    </member>
    <member name="M:PetaPoco.Mappers.Revoke(System.Type)">
      <summary>
Remove the mapper for a specific type</summary>
      <param name="type">
The type whose mapper is to be removed</param>
    </member>
    <member name="M:PetaPoco.Mappers.Revoke(PetaPoco.IMapper)">
      <summary>
Revoke an instance of a mapper</summary>
      <param name="mapper">
The IMapper to be revkoed</param>
    </member>
    <member name="M:PetaPoco.Mappers.RevokeAll">
      <summary>
Revokes all registered mappers.</summary>
    </member>
    <member name="M:PetaPoco.Mappers.GetMapper(System.Type,PetaPoco.IMapper)">
      <summary>
Retrieve the IMapper implementation to be used for a specified POCO type.</summary>
      <returns>
The mapper for the given type.</returns>
      <param name="entityType">
The entity type to get the mapper for.</param>
      <param name="defaultMapper">
The default mapper to use when non is registered for the type.</param>
    </member>
    <member name="T:PetaPoco.Page`1">
      <summary>
Holds the results of a paged request.</summary>
    </member>
    <member name="P:PetaPoco.Page`1.CurrentPage">
      <summary>
The current page number contained in this page of result set</summary>
    </member>
    <member name="P:PetaPoco.Page`1.TotalPages">
      <summary>
The total number of pages in the full result set</summary>
    </member>
    <member name="P:PetaPoco.Page`1.TotalItems">
      <summary>
The total number of records in the full result set</summary>
    </member>
    <member name="P:PetaPoco.Page`1.ItemsPerPage">
      <summary>
The number of items per page</summary>
    </member>
    <member name="P:PetaPoco.Page`1.Items">
      <summary>
The actual records on this page</summary>
    </member>
    <member name="P:PetaPoco.Page`1.Context">
      <summary>
User property to hold anything.</summary>
    </member>
    <member name="T:PetaPoco.PocoColumn">
    </member>
    <member name="M:PetaPoco.PocoColumn.SetValue(System.Object,System.Object)">
      <param name="target">
</param>
      <param name="val">
</param>
    </member>
    <member name="M:PetaPoco.PocoColumn.GetValue(System.Object)">
      <param name="target">
</param>
    </member>
    <member name="M:PetaPoco.PocoColumn.ChangeType(System.Object)">
      <param name="val">
</param>
    </member>
    <member name="T:PetaPoco.PocoData">
    </member>
    <member name="P:PetaPoco.PocoData.QueryColumns">
    </member>
    <member name="P:PetaPoco.PocoData.TableInfo">
    </member>
    <member name="P:PetaPoco.PocoData.Columns">
    </member>
    <member name="M:PetaPoco.PocoData.#ctor">
    </member>
    <member name="M:PetaPoco.PocoData.#ctor(System.Type,PetaPoco.IMapper)">
      <param name="type">
</param>
      <param name="defaultMapper">
</param>
    </member>
    <member name="M:PetaPoco.PocoData.ForObject(System.Object,System.String,PetaPoco.IMapper)">
      <param name="obj">
</param>
      <param name="primaryKeyName">
</param>
      <param name="defaultMapper">
</param>
    </member>
    <member name="M:PetaPoco.PocoData.ForType(System.Type,PetaPoco.IMapper)">
      <param name="type">
</param>
      <param name="defaultMapper">
</param>
    </member>
    <member name="M:PetaPoco.PocoData.GetFactory(System.String,System.String,System.Int32,System.Int32,System.Data.IDataReader,PetaPoco.IMapper)">
      <param name="sql">
</param>
      <param name="connectionString">
</param>
      <param name="firstColumn">
</param>
      <param name="countColumns">
</param>
      <param name="reader">
</param>
      <param name="defaultMapper">
</param>
    </member>
    <member name="T:PetaPoco.Sql">
      <summary>
A simple helper class for build SQL statements</summary>
    </member>
    <member name="P:PetaPoco.Sql.Builder">
      <summary>
Instantiate a new SQL Builder object. Weirdly implemented as a property but makes for more elegantly readble fluent style construction of SQL Statements eg: db.Query(Sql.Builder.Append(....))</summary>
    </member>
    <member name="P:PetaPoco.Sql.SQL">
      <summary>
Returns the final SQL statement represented by this builder</summary>
    </member>
    <member name="P:PetaPoco.Sql.Arguments">
      <summary>
Gets the complete, final set of arguments collected by this builder.</summary>
    </member>
    <member name="M:PetaPoco.Sql.#ctor">
      <summary>
Default, empty constructor</summary>
    </member>
    <member name="M:PetaPoco.Sql.#ctor(System.String,System.Object[])">
      <summary>
Construct an SQL statement with the supplied SQL and arguments</summary>
      <param name="sql">
The SQL statement or fragment</param>
      <param name="args">
Arguments to any parameters embedded in the SQL</param>
    </member>
    <member name="M:PetaPoco.Sql.Append(PetaPoco.Sql)">
      <summary>
Append another SQL builder instance to the right-hand-side of this SQL builder</summary>
      <returns>
A reference to this builder, allowing for fluent style concatenation</returns>
      <param name="sql">
A reference to another SQL builder instance</param>
    </member>
    <member name="M:PetaPoco.Sql.Append(System.String,System.Object[])">
      <summary>
Append an SQL fragement to the right-hand-side of this SQL builder</summary>
      <returns>
A reference to this builder, allowing for fluent style concatenation</returns>
      <param name="sql">
The SQL statement or fragment</param>
      <param name="args">
Arguments to any parameters embedded in the SQL</param>
    </member>
    <member name="M:PetaPoco.Sql.Where(System.String,System.Object[])">
      <summary>
Appends an SQL WHERE clause to this SQL builder</summary>
      <returns>
A reference to this builder, allowing for fluent style concatenation</returns>
      <param name="sql">
The condition of the WHERE clause</param>
      <param name="args">
Arguments to any parameters embedded in the supplied SQL</param>
    </member>
    <member name="M:PetaPoco.Sql.OrderBy(System.Object[])">
      <summary>
Appends an SQL ORDER BY clause to this SQL builder</summary>
      <returns>
A reference to this builder, allowing for fluent style concatenation</returns>
      <param name="columns">
A collection of SQL column names to order by</param>
    </member>
    <member name="M:PetaPoco.Sql.Select(System.Object[])">
      <summary>
Appends an SQL SELECT clause to this SQL builder</summary>
      <param name="columns">
</param>
    </member>
    <member name="M:PetaPoco.Sql.From(System.Object[])">
      <summary>
Appends an SQL FROM clause to this SQL builder</summary>
      <returns>
A reference to this builder, allowing for fluent style concatenation</returns>
      <param name="tables">
A collection of table names to be used in the FROM clause</param>
    </member>
    <member name="M:PetaPoco.Sql.GroupBy(System.Object[])">
      <summary>
Appends an SQL GROUP BY clause to this SQL builder</summary>
      <returns>
A reference to this builder, allowing for fluent style concatenation</returns>
      <param name="columns">
A collection of column names to be grouped by</param>
    </member>
    <member name="M:PetaPoco.Sql.InnerJoin(System.String)">
      <summary>
Appends an SQL INNER JOIN clause to this SQL builder</summary>
      <returns>
A reference an SqlJoinClause through which the join condition can be specified</returns>
      <param name="table">
The name of the table to join</param>
    </member>
    <member name="M:PetaPoco.Sql.LeftJoin(System.String)">
      <summary>
Appends an SQL LEFT JOIN clause to this SQL builder</summary>
      <returns>
A reference an SqlJoinClause through which the join condition can be specified</returns>
      <param name="table">
The name of the table to join</param>
    </member>
    <member name="M:PetaPoco.Sql.ToString">
      <summary>
Returns the SQL statement.</summary>
    </member>
    <member name="T:PetaPoco.Sql.SqlJoinClause">
      <summary>
The SqlJoinClause is a simple helper class used in the construction of SQL JOIN statements with the SQL builder</summary>
    </member>
    <member name="M:PetaPoco.Sql.SqlJoinClause.#ctor(PetaPoco.Sql)">
      <param name="sql">
</param>
    </member>
    <member name="M:PetaPoco.Sql.SqlJoinClause.On(System.String,System.Object[])">
      <summary>
Appends a SQL ON clause after a JOIN statement</summary>
      <returns>
A reference to the parent SQL builder, allowing for fluent style concatenation</returns>
      <param name="onClause">
The ON clause to be appended</param>
      <param name="args">
Arguments to any parameters embedded in the supplied SQL</param>
    </member>
    <member name="T:PetaPoco.StandardMapper">
      <summary>
StandardMapper is the default implementation of IMapper used by PetaPoco</summary>
    </member>
    <member name="M:PetaPoco.StandardMapper.GetTableInfo(System.Type)">
      <summary>
Get information about the table associated with a POCO class</summary>
      <remarks>
This method must return a valid TableInfo. To create a TableInfo from a POCO's attributes, use TableInfo.FromPoco</remarks>
      <returns>
A TableInfo instance</returns>
      <param name="pocoType">
The poco type.</param>
    </member>
    <member name="M:PetaPoco.StandardMapper.GetColumnInfo(System.Reflection.PropertyInfo)">
      <summary>
Get information about the column associated with a property of a POCO</summary>
      <remarks>
To create a ColumnInfo from a property's attributes, use PropertyInfo.FromProperty</remarks>
      <returns>
A reference to a ColumnInfo instance, or null to ignore this property</returns>
      <param name="pocoProperty">
The PropertyInfo of the property being queried</param>
    </member>
    <member name="M:PetaPoco.StandardMapper.GetFromDbConverter(System.Reflection.PropertyInfo,System.Type)">
      <summary>
Supply a function to convert a database value to the correct property value</summary>
      <returns>
A Func that can do the conversion, or null for no conversion</returns>
      <param name="targetProperty">
The target property</param>
      <param name="sourceType">
The type of data returned by the DB</param>
    </member>
    <member name="M:PetaPoco.StandardMapper.GetToDbConverter(System.Reflection.PropertyInfo)">
      <summary>
Supply a function to convert a property value into a database value</summary>
      <remarks>
This conversion is only used for converting values from POCO's that are being Inserted or Updated. Conversion is not available for parameter values passed directly to queries.</remarks>
      <returns>
A Func that can do the conversion</returns>
      <param name="sourceProperty">
The property to be converted</param>
    </member>
    <member name="T:PetaPoco.TableInfo">
      <summary>
Use by IMapper to override table bindings for an object</summary>
    </member>
    <member name="P:PetaPoco.TableInfo.TableName">
      <summary>
The database table name</summary>
    </member>
    <member name="P:PetaPoco.TableInfo.PrimaryKey">
      <summary>
The name of the primary key column of the table</summary>
    </member>
    <member name="P:PetaPoco.TableInfo.AutoIncrement">
      <summary>
True if the primary key column is an auto-incrementing</summary>
    </member>
    <member name="P:PetaPoco.TableInfo.SequenceName">
      <summary>
The name of the sequence used for auto-incrementing Oracle primary key fields</summary>
    </member>
    <member name="M:PetaPoco.TableInfo.FromPoco(System.Type)">
      <summary>
Creates and populates a TableInfo from the attributes of a POCO</summary>
      <returns>
A TableInfo instance</returns>
      <param name="t">
The POCO type</param>
    </member>
    <member name="T:PetaPoco.Transaction">
      <summary>
Transaction object helps maintain transaction depth counts</summary>
    </member>
    <member name="M:PetaPoco.Transaction.#ctor(PetaPoco.Database)">
      <param name="db">
</param>
    </member>
    <member name="M:PetaPoco.Transaction.Complete">
      <summary>
Completes the transaction. Not calling complete will cause the transaction to rollback on dispose.</summary>
    </member>
    <member name="M:PetaPoco.Transaction.Dispose">
    </member>
    <member name="T:PetaPoco.EnglishInflector">
      <summary>
Author: Originally written (I believe) by Andrew Peters Source: Scott Kirkland (https://github.com/srkirkland/Inflector)</summary>
    </member>
    <member name="M:PetaPoco.EnglishInflector.Pluralise(System.String)">
      <summary>
Pluralises a word.</summary>
      <returns>
The pluralised word.</returns>
      <param name="word">
The word to pluralise.</param>
    </member>
    <member name="M:PetaPoco.EnglishInflector.Singularise(System.String)">
      <summary>
Singularises a word.</summary>
      <returns>
The signularised word.</returns>
      <param name="word">
The word to signularise.</param>
    </member>
    <member name="M:PetaPoco.EnglishInflector.Titleise(System.String)">
      <summary>
Titleises the word. (title =&gt; Title, the_brown_fox =&gt; TheBrownFox)</summary>
      <returns>
The titleised word.</returns>
      <param name="word">
The word to titleise.</param>
    </member>
    <member name="M:PetaPoco.EnglishInflector.Humanise(System.String)">
      <summary>
Humanizes the word.</summary>
      <returns>
The humanized word.</returns>
      <param name="lowercaseAndUnderscoredWord">
The word to humanise.</param>
    </member>
    <member name="M:PetaPoco.EnglishInflector.Pascalise(System.String)">
      <summary>
Pascalises the word.</summary>
      <returns>
The pascalied word.</returns>
      <param name="lowercaseAndUnderscoredWord">
The word to pascalise.</param>
    </member>
    <member name="M:PetaPoco.EnglishInflector.Camelise(System.String)">
      <summary>
Camelises the word.</summary>
      <returns>
The camelised word.</returns>
      <param name="lowercaseAndUnderscoredWord">
The word to camelise.</param>
    </member>
    <member name="M:PetaPoco.EnglishInflector.Underscore(System.String)">
      <summary>
Underscores the word.</summary>
      <returns>
The underscored word.</returns>
      <param name="pascalCasedWord">
The word to underscore.</param>
    </member>
    <member name="M:PetaPoco.EnglishInflector.Capitalise(System.String)">
      <summary>
Capitalises the word.</summary>
      <returns>
The capitalised word.</returns>
      <param name="word">
The word to capitalise.</param>
    </member>
    <member name="M:PetaPoco.EnglishInflector.Uncapitalise(System.String)">
      <summary>
Uncapitalises the word.</summary>
      <returns>
The uncapitalised word.</returns>
      <param name="word">
The word to uncapitalise.</param>
    </member>
    <member name="M:PetaPoco.EnglishInflector.Ordinalise(System.String)">
      <summary>
Ordinalises the number.</summary>
      <returns>
The ordinalised number.</returns>
      <param name="number">
The number to ordinalise.</param>
    </member>
    <member name="M:PetaPoco.EnglishInflector.Ordinalise(System.Int32)">
      <summary>
Ordinalises the number.</summary>
      <returns>
The ordinalised number.</returns>
      <param name="number">
The number to ordinalise.</param>
    </member>
    <member name="M:PetaPoco.EnglishInflector.Dasherise(System.String)">
      <summary>
Dasherises the word.</summary>
      <returns>
The dasherised word.</returns>
      <param name="underscoredWord">
The word to dasherise.</param>
    </member>
    <member name="M:PetaPoco.IInflector.Pluralise(System.String)">
      <summary>
Pluralises a word.</summary>
      <returns>
The pluralised word.</returns>
      <param name="word">
The word to pluralise.</param>
    </member>
    <member name="M:PetaPoco.IInflector.Singularise(System.String)">
      <summary>
Singularises a word.</summary>
      <returns>
The signularised word.</returns>
      <param name="word">
The word to signularise.</param>
    </member>
    <member name="M:PetaPoco.IInflector.Titleise(System.String)">
      <summary>
Titleises the word. (title =&gt; Title, the_brown_fox =&gt; TheBrownFox)</summary>
      <returns>
The titleised word.</returns>
      <param name="word">
The word to titleise.</param>
    </member>
    <member name="M:PetaPoco.IInflector.Humanise(System.String)">
      <summary>
Humanizes the word.</summary>
      <returns>
The humanized word.</returns>
      <param name="lowercaseAndUnderscoredWord">
The word to humanise.</param>
    </member>
    <member name="M:PetaPoco.IInflector.Pascalise(System.String)">
      <summary>
Pascalises the word.</summary>
      <returns>
The pascalied word.</returns>
      <param name="lowercaseAndUnderscoredWord">
The word to pascalise.</param>
    </member>
    <member name="M:PetaPoco.IInflector.Camelise(System.String)">
      <summary>
Camelises the word.</summary>
      <returns>
The camelised word.</returns>
      <param name="lowercaseAndUnderscoredWord">
The word to camelise.</param>
    </member>
    <member name="M:PetaPoco.IInflector.Underscore(System.String)">
      <summary>
Underscores the word.</summary>
      <returns>
The underscored word.</returns>
      <param name="pascalCasedWord">
The word to underscore.</param>
    </member>
    <member name="M:PetaPoco.IInflector.Capitalise(System.String)">
      <summary>
Capitalises the word.</summary>
      <returns>
The capitalised word.</returns>
      <param name="word">
The word to capitalise.</param>
    </member>
    <member name="M:PetaPoco.IInflector.Uncapitalise(System.String)">
      <summary>
Uncapitalises the word.</summary>
      <returns>
The uncapitalised word.</returns>
      <param name="word">
The word to uncapitalise.</param>
    </member>
    <member name="M:PetaPoco.IInflector.Ordinalise(System.String)">
      <summary>
Ordinalises the number.</summary>
      <returns>
The ordinalised number.</returns>
      <param name="number">
The number to ordinalise.</param>
    </member>
    <member name="M:PetaPoco.IInflector.Ordinalise(System.Int32)">
      <summary>
Ordinalises the number.</summary>
      <returns>
The ordinalised number.</returns>
      <param name="number">
The number to ordinalise.</param>
    </member>
    <member name="M:PetaPoco.IInflector.Dasherise(System.String)">
      <summary>
Dasherises the word.</summary>
      <returns>
The dasherised word.</returns>
      <param name="underscoredWord">
The word to dasherise.</param>
    </member>
    <member name="T:PetaPoco.Inflector">
      <summary>
Static inflection helper</summary>
    </member>
    <member name="P:PetaPoco.Inflector.Instance">
      <summary>
Gets or sets the <see cref="IInflector" /> instacne.</summary>
      <remarks>
By default the <see cref="EnglishInflector" /> instance used.</remarks>
      <value>
The currently set <see cref="IInflector" /> instance.</value>
    </member>
    <member name="T:PetaPoco.FirebirdDbDatabaseProvider">
    </member>
    <member name="M:PetaPoco.FirebirdDbDatabaseProvider.GetFactory">
      <summary>
Gets the DbProviderFactory for this database provider.</summary>
      <returns>
The provider factory.</returns>
    </member>
    <member name="M:PetaPoco.FirebirdDbDatabaseProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.SQLParts,System.Object[]@)">
      <summary>
Builds an SQL query suitable for performing page based queries to the database</summary>
      <returns>
The final SQL query that should be executed.</returns>
      <param name="skip">
The number of rows that should be skipped by the query</param>
      <param name="take">
The number of rows that should be retruend by the query</param>
      <param name="parts">
The original SQL query after being parsed into it's component parts</param>
      <param name="args">
Arguments to any embedded parameters in the SQL query</param>
    </member>
    <member name="M:PetaPoco.FirebirdDbDatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
      <summary>
Performs an Insert operation</summary>
      <returns>
The ID of the newly inserted record</returns>
      <param name="database">
The calling Database object</param>
      <param name="cmd">
The insert command to be executed</param>
      <param name="primaryKeyName">
The primary key of the table being inserted into</param>
    </member>
    <member name="M:PetaPoco.FirebirdDbDatabaseProvider.EscapeSqlIdentifier(System.String)">
      <summary>
Escape and arbitary SQL identifier into a format suitable for the associated database provider</summary>
      <returns>
The escaped identifier</returns>
      <param name="sqlIdentifier">
The SQL identifier to be escaped</param>
    </member>
    <member name="T:PetaPoco.MariaDbDatabaseProvider">
    </member>
    <member name="M:PetaPoco.MariaDbDatabaseProvider.GetFactory">
      <summary>
Gets the DbProviderFactory for this database provider.</summary>
      <returns>
The provider factory.</returns>
    </member>
    <member name="M:PetaPoco.MariaDbDatabaseProvider.GetParameterPrefix(System.String)">
      <summary>
Returns the prefix used to delimit parameters in SQL query strings.</summary>
      <returns>
The providers character for prefixing a query parameter.</returns>
      <param name="connectionString">
The connection string.</param>
    </member>
    <member name="M:PetaPoco.MariaDbDatabaseProvider.EscapeSqlIdentifier(System.String)">
      <summary>
Escape and arbitary SQL identifier into a format suitable for the associated database provider</summary>
      <returns>
The escaped identifier</returns>
      <param name="sqlIdentifier">
The SQL identifier to be escaped</param>
    </member>
    <member name="M:PetaPoco.MariaDbDatabaseProvider.GetExistsSql">
      <summary>
Returns an SQL Statement that can check for the existence of a row in the database.</summary>
    </member>
    <member name="T:PetaPoco.MsAccessDbDatabaseProvider">
    </member>
    <member name="M:PetaPoco.MsAccessDbDatabaseProvider.GetFactory">
      <summary>
Gets the DbProviderFactory for this database provider.</summary>
      <returns>
The provider factory.</returns>
    </member>
    <member name="M:PetaPoco.MsAccessDbDatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
      <summary>
Performs an Insert operation</summary>
      <returns>
The ID of the newly inserted record</returns>
      <param name="database">
The calling Database object</param>
      <param name="cmd">
The insert command to be executed</param>
      <param name="primaryKeyName">
The primary key of the table being inserted into</param>
    </member>
    <member name="M:PetaPoco.MsAccessDbDatabaseProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.SQLParts,System.Object[]@)">
      <summary>
Builds an SQL query suitable for performing page based queries to the database</summary>
      <returns>
The final SQL query that should be executed.</returns>
      <param name="skip">
The number of rows that should be skipped by the query</param>
      <param name="take">
The number of rows that should be retruend by the query</param>
      <param name="parts">
The original SQL query after being parsed into it's component parts</param>
      <param name="args">
Arguments to any embedded parameters in the SQL query</param>
    </member>
    <member name="T:PetaPoco.MySqlDatabaseProvider">
    </member>
    <member name="M:PetaPoco.MySqlDatabaseProvider.GetFactory">
      <summary>
Gets the DbProviderFactory for this database provider.</summary>
      <returns>
The provider factory.</returns>
    </member>
    <member name="M:PetaPoco.MySqlDatabaseProvider.GetParameterPrefix(System.String)">
      <summary>
Returns the prefix used to delimit parameters in SQL query strings.</summary>
      <returns>
The providers character for prefixing a query parameter.</returns>
      <param name="connectionString">
The connection string.</param>
    </member>
    <member name="M:PetaPoco.MySqlDatabaseProvider.EscapeSqlIdentifier(System.String)">
      <summary>
Escape and arbitary SQL identifier into a format suitable for the associated database provider</summary>
      <returns>
The escaped identifier</returns>
      <param name="sqlIdentifier">
The SQL identifier to be escaped</param>
    </member>
    <member name="M:PetaPoco.MySqlDatabaseProvider.GetExistsSql">
      <summary>
Returns an SQL Statement that can check for the existence of a row in the database.</summary>
    </member>
    <member name="T:PetaPoco.OracleDatabaseProvider">
    </member>
    <member name="M:PetaPoco.OracleDatabaseProvider.GetParameterPrefix(System.String)">
      <summary>
Returns the prefix used to delimit parameters in SQL query strings.</summary>
      <returns>
The providers character for prefixing a query parameter.</returns>
      <param name="connectionString">
The connection string.</param>
    </member>
    <member name="M:PetaPoco.OracleDatabaseProvider.PreExecute(System.Data.IDbCommand)">
      <summary>
Called immediately before a command is executed, allowing for modification of the IDbCommand before it's passed to the database provider</summary>
      <param name="cmd">
</param>
    </member>
    <member name="M:PetaPoco.OracleDatabaseProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.SQLParts,System.Object[]@)">
      <summary>
Builds an SQL query suitable for performing page based queries to the database</summary>
      <returns>
The final SQL query that should be executed.</returns>
      <param name="skip">
The number of rows that should be skipped by the query</param>
      <param name="take">
The number of rows that should be retruend by the query</param>
      <param name="parts">
The original SQL query after being parsed into it's component parts</param>
      <param name="args">
Arguments to any embedded parameters in the SQL query</param>
    </member>
    <member name="M:PetaPoco.OracleDatabaseProvider.GetFactory">
      <summary>
Gets the DbProviderFactory for this database provider.</summary>
      <returns>
The provider factory.</returns>
    </member>
    <member name="M:PetaPoco.OracleDatabaseProvider.EscapeSqlIdentifier(System.String)">
      <summary>
Escape and arbitary SQL identifier into a format suitable for the associated database provider</summary>
      <returns>
The escaped identifier</returns>
      <param name="sqlIdentifier">
The SQL identifier to be escaped</param>
    </member>
    <member name="M:PetaPoco.OracleDatabaseProvider.GetAutoIncrementExpression(PetaPoco.TableInfo)">
      <summary>
Return an SQL expression that can be used to populate the primary key column of an auto-increment column.</summary>
      <remarks>
See the Oracle database type for an example of how this method is used.</remarks>
      <returns>
An SQL expressions</returns>
      <param name="ti">
</param>
    </member>
    <member name="M:PetaPoco.OracleDatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
      <summary>
Performs an Insert operation</summary>
      <returns>
The ID of the newly inserted record</returns>
      <param name="db">
</param>
      <param name="cmd">
The insert command to be executed</param>
      <param name="primaryKeyName">
The primary key of the table being inserted into</param>
    </member>
    <member name="T:PetaPoco.PostgreSQLDatabaseProvider">
    </member>
    <member name="P:PetaPoco.PostgreSQLDatabaseProvider.HasNativeGuidSupport">
      <summary>
Gets a flag for whether the DB has native support for GUID/UUID.</summary>
    </member>
    <member name="M:PetaPoco.PostgreSQLDatabaseProvider.GetFactory">
      <summary>
Gets the DbProviderFactory for this database provider.</summary>
      <returns>
The provider factory.</returns>
    </member>
    <member name="M:PetaPoco.PostgreSQLDatabaseProvider.GetExistsSql">
      <summary>
Returns an SQL Statement that can check for the existence of a row in the database.</summary>
    </member>
    <member name="M:PetaPoco.PostgreSQLDatabaseProvider.MapParameterValue(System.Object)">
      <summary>
Converts a supplied C# object value into a value suitable for passing to the database</summary>
      <returns>
The converted value</returns>
      <param name="value">
The value to convert</param>
    </member>
    <member name="M:PetaPoco.PostgreSQLDatabaseProvider.EscapeSqlIdentifier(System.String)">
      <summary>
Escape and arbitary SQL identifier into a format suitable for the associated database provider</summary>
      <returns>
The escaped identifier</returns>
      <param name="sqlIdentifier">
The SQL identifier to be escaped</param>
    </member>
    <member name="M:PetaPoco.PostgreSQLDatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
      <summary>
Performs an Insert operation</summary>
      <returns>
The ID of the newly inserted record</returns>
      <param name="db">
</param>
      <param name="cmd">
The insert command to be executed</param>
      <param name="primaryKeyName">
The primary key of the table being inserted into</param>
    </member>
    <member name="T:PetaPoco.SQLiteDatabaseProvider">
    </member>
    <member name="M:PetaPoco.SQLiteDatabaseProvider.GetFactory">
      <summary>
Gets the DbProviderFactory for this database provider.</summary>
      <returns>
The provider factory.</returns>
    </member>
    <member name="M:PetaPoco.SQLiteDatabaseProvider.MapParameterValue(System.Object)">
      <summary>
Converts a supplied C# object value into a value suitable for passing to the database</summary>
      <returns>
The converted value</returns>
      <param name="value">
The value to convert</param>
    </member>
    <member name="M:PetaPoco.SQLiteDatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
      <summary>
Performs an Insert operation</summary>
      <returns>
The ID of the newly inserted record</returns>
      <param name="db">
</param>
      <param name="cmd">
The insert command to be executed</param>
      <param name="primaryKeyName">
The primary key of the table being inserted into</param>
    </member>
    <member name="M:PetaPoco.SQLiteDatabaseProvider.GetExistsSql">
      <summary>
Returns an SQL Statement that can check for the existence of a row in the database.</summary>
    </member>
    <member name="T:PetaPoco.SqlServerCEDatabaseProviders">
    </member>
    <member name="M:PetaPoco.SqlServerCEDatabaseProviders.GetFactory">
      <summary>
Gets the DbProviderFactory for this database provider.</summary>
      <returns>
The provider factory.</returns>
    </member>
    <member name="M:PetaPoco.SqlServerCEDatabaseProviders.BuildPageQuery(System.Int64,System.Int64,PetaPoco.SQLParts,System.Object[]@)">
      <summary>
Builds an SQL query suitable for performing page based queries to the database</summary>
      <returns>
The final SQL query that should be executed.</returns>
      <param name="skip">
The number of rows that should be skipped by the query</param>
      <param name="take">
The number of rows that should be retruend by the query</param>
      <param name="parts">
The original SQL query after being parsed into it's component parts</param>
      <param name="args">
Arguments to any embedded parameters in the SQL query</param>
    </member>
    <member name="M:PetaPoco.SqlServerCEDatabaseProviders.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
      <summary>
Performs an Insert operation</summary>
      <returns>
The ID of the newly inserted record</returns>
      <param name="db">
</param>
      <param name="cmd">
The insert command to be executed</param>
      <param name="primaryKeyName">
The primary key of the table being inserted into</param>
    </member>
    <member name="T:PetaPoco.SqlServerDatabaseProvider">
    </member>
    <member name="M:PetaPoco.SqlServerDatabaseProvider.GetFactory">
      <summary>
Gets the DbProviderFactory for this database provider.</summary>
      <returns>
The provider factory.</returns>
    </member>
    <member name="M:PetaPoco.SqlServerDatabaseProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.SQLParts,System.Object[]@)">
      <summary>
Builds an SQL query suitable for performing page based queries to the database</summary>
      <returns>
The final SQL query that should be executed.</returns>
      <param name="skip">
The number of rows that should be skipped by the query</param>
      <param name="take">
The number of rows that should be retruend by the query</param>
      <param name="parts">
The original SQL query after being parsed into it's component parts</param>
      <param name="args">
Arguments to any embedded parameters in the SQL query</param>
    </member>
    <member name="M:PetaPoco.SqlServerDatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
      <summary>
Performs an Insert operation</summary>
      <returns>
The ID of the newly inserted record</returns>
      <param name="db">
</param>
      <param name="cmd">
The insert command to be executed</param>
      <param name="primaryKeyName">
The primary key of the table being inserted into</param>
    </member>
    <member name="M:PetaPoco.SqlServerDatabaseProvider.GetExistsSql">
      <summary>
Returns an SQL Statement that can check for the existence of a row in the database.</summary>
    </member>
    <member name="M:PetaPoco.SqlServerDatabaseProvider.GetInsertOutputClause(System.String)">
      <summary>
Returns an SQL expression that can be used to specify the return value of auto incremented columns.</summary>
      <remarks>
See the SQLServer database provider for an example of how this method is used.</remarks>
      <returns>
An expression describing how to return the new primary key value</returns>
      <param name="primaryKeyName">
The primary key of the row being inserted.</param>
    </member>
    <member name="M:PetaPoco.IPagingHelper.SplitSQL(System.String,PetaPoco.SQLParts@)">
      <summary>
Splits the given <paramref name="sql" /> into <paramref name="parts" />;</summary>
      <returns>
<c>True</c> if the SQL could be split; else, <c>False</c>.</returns>
      <param name="sql">
The SQL to split.</param>
      <param name="parts">
The SQL parts.</param>
    </member>
    <member name="T:PetaPoco.PagingHelper">
    </member>
    <member name="P:PetaPoco.PagingHelper.Instance">
    </member>
    <member name="M:PetaPoco.PagingHelper.SplitSQL(System.String,PetaPoco.SQLParts@)">
      <summary>
Splits the given <paramref name="sql" /> into <paramref name="parts" />;</summary>
      <returns>
<c>True</c> if the SQL could be split; else, <c>False</c>.</returns>
      <param name="sql">
The SQL to split.</param>
      <param name="parts">
The SQL parts.</param>
    </member>
    <member name="N:FBNCInject.Framework.Security">
    </member>
    <member name="T:FBNCInject.Framework.Security.Crypto">
    </member>
    <member name="P:FBNCInject.Framework.Security.Crypto.Key">
    </member>
    <member name="P:FBNCInject.Framework.Security.Crypto.EncryptionAlgorithm">
    </member>
    <member name="P:FBNCInject.Framework.Security.Crypto.Encoding">
    </member>
    <member name="P:FBNCInject.Framework.Security.Crypto.Content">
    </member>
    <member name="P:FBNCInject.Framework.Security.Crypto.CryptoException">
    </member>
    <member name="P:FBNCInject.Framework.Security.Crypto.IsHashAlgorithm">
    </member>
    <member name="M:FBNCInject.Framework.Security.Crypto.EncryptString(System.String)">
      <param name="Content">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Security.Crypto.DecryptString">
    </member>
    <member name="M:FBNCInject.Framework.Security.Crypto.EncryptFile(System.String,System.String)">
      <param name="Filename">
</param>
      <param name="Target">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Security.Crypto.DecryptFile(System.String,System.String)">
      <param name="Filename">
</param>
      <param name="Target">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Security.Crypto.GenerateHash(System.String)">
      <param name="Content">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Security.Crypto.Clear">
    </member>
    <member name="T:FBNCInject.Framework.Security.DES">
    </member>
    <member name="T:FBNCInject.Framework.Security.DES.KryptoResultText">
    </member>
    <member name="P:FBNCInject.Framework.Security.DES.KryptoResultText.Key">
    </member>
    <member name="P:FBNCInject.Framework.Security.DES.KryptoResultText.StrResult">
    </member>
    <member name="M:FBNCInject.Framework.Security.DES.Encryption(System.String,System.String)">
      <param name="strInput">
</param>
      <param name="sKey">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Security.DES.Decryption(System.String,System.String)">
      <param name="strInput">
</param>
      <param name="sKey">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Security.DES.Encrypt(System.String,System.String)">
      <param name="strInput">
</param>
      <param name="sKey">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Security.DES.Decrypt(System.String,System.String)">
      <param name="strInput">
</param>
      <param name="sKey">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Security.DES.GenerateKey">
    </member>
    <member name="M:FBNCInject.Framework.Security.DES.EnkryptFile(System.String,System.String,System.String)">
      <param name="sInputFilename">
</param>
      <param name="sOutputFilename">
</param>
      <param name="sKey">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Security.DES.DekryptFile(System.String,System.String,System.String)">
      <param name="sInputFilename">
</param>
      <param name="sOutputFilename">
</param>
      <param name="sKey">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Security.DES.EncryptFile(System.String,System.String,System.String)">
      <param name="sInputFilename">
</param>
      <param name="sOutputFilename">
</param>
      <param name="sKey">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Security.DES.DecryptFile(System.String,System.String,System.String)">
      <param name="sInputFilename">
</param>
      <param name="sOutputFilename">
</param>
      <param name="sKey">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Security.DES.KryptoResultFile">
    </member>
    <member name="P:FBNCInject.Framework.Security.DES.KryptoResultFile.Key">
    </member>
    <member name="P:FBNCInject.Framework.Security.DES.KryptoResultFile.OutputFilePath">
    </member>
    <member name="M:FBNCInject.Framework.Security.DES.TestFileEncryption">
    </member>
    <member name="N:FBNCInject.Framework.Utilities.Services">
    </member>
    <member name="T:FBNCInject.Framework.Utilities.Services.ADServices">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Services.ADServices.GetUser(System.String)">
      <param name="UserName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Services.ADServices.IsUserValid(System.String,System.String)">
      <summary>
This method will attempt to log in a user based on the username and password to ensure that they have been set up within the Active Directory. This is the basic UserName, Password check.</summary>
      <param name="UserName">
</param>
      <param name="Password">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Services.ADServices.IsUserValid(System.String)">
      <summary>
This method will attempt to log in a user based on the username and password to ensure that they have been set up within the Active Directory. This is the basic UserName, Password check.</summary>
      <param name="UserName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Services.ADServices.LoginAuthenticate(System.String,System.String)">
      <param name="username">
</param>
      <param name="password">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Services.ADServices.getFullName(System.String)">
      <param name="username">
</param>
    </member>
    <member name="N:FBNCInject.Framework.Services">
    </member>
    <member name="T:FBNCInject.Framework.Services.EmailService">
    </member>
    <member name="M:FBNCInject.Framework.Services.EmailService.isEmail(System.String)">
      <param name="inputEmail">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Services.EmailService.getHtmlFilePath(System.String)">
      <param name="fileName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Services.EmailService.ReadHtmlFile(System.String)">
      <param name="fileName">
</param>
    </member>
    <member name="P:FBNCInject.Framework.Services.EmailService.Append">
    </member>
    <member name="M:FBNCInject.Framework.Services.EmailService.SendEmailAlert(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String[])">
      <param name="ToEmails">
</param>
      <param name="CCEmails">
</param>
      <param name="strMessage">
</param>
      <param name="strTitle">
</param>
      <param name="strSenderEmail">
</param>
      <param name="deleteAttachments">
</param>
      <param name="attache_files">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Services.EmailService.SendMailAlert(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String[])">
      <param name="ToEmails">
</param>
      <param name="CCEmails">
</param>
      <param name="strMessage">
</param>
      <param name="strTitle">
</param>
      <param name="strSenderEmail">
</param>
      <param name="deleteAttachments">
</param>
      <param name="attache_files">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Services.ServerInfo">
    </member>
    <member name="P:FBNCInject.Framework.Services.ServerInfo.HostName">
    </member>
    <member name="P:FBNCInject.Framework.Services.ServerInfo.IPAddress">
    </member>
    <member name="T:FBNCInject.Framework.Services.NetworkService">
    </member>
    <member name="P:FBNCInject.Framework.Services.NetworkService.serverInfo">
    </member>
    <member name="M:FBNCInject.Framework.Services.NetworkService.#ctor">
    </member>
    <member name="M:FBNCInject.Framework.Services.NetworkService.#ctor(FBNCInject.Framework.Services.ServerInfo@)">
      <param name="servInfo">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Services.NetworkService.GetServerInfo">
    </member>
    <member name="M:FBNCInject.Framework.Services.NetworkService.GetIPAddress">
    </member>
    <member name="M:FBNCInject.Framework.Services.NetworkService.GetHostName">
    </member>
    <member name="M:FBNCInject.Framework.Services.NetworkService.GetIPv4Address">
    </member>
    <member name="M:FBNCInject.Framework.Services.NetworkService.getClientIPAddress">
    </member>
    <member name="M:FBNCInject.Framework.Services.NetworkService.getClientIPAddressList">
    </member>
    <member name="M:FBNCInject.Framework.Services.NetworkService.getClientIPHost">
    </member>
    <member name="P:FBNCInject.Framework.ISysConfig.TestMode">
    </member>
    <member name="P:FBNCInject.Framework.ISysConfig.AppName">
    </member>
    <member name="P:FBNCInject.Framework.ISysConfig.AppFolder">
    </member>
    <member name="T:FBNCInject.Framework.SysConfig">
    </member>
    <member name="P:FBNCInject.Framework.SysConfig.TestMode">
    </member>
    <member name="P:FBNCInject.Framework.SysConfig.AppMode">
    </member>
    <member name="P:FBNCInject.Framework.SysConfig.AppName">
    </member>
    <member name="P:FBNCInject.Framework.SysConfig.AppFolder">
    </member>
    <member name="N:FBNCInject.Framework.Utilities">
    </member>
    <member name="T:FBNCInject.Framework.Utilities.AuditSerializer">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.AuditSerializer.ToByte(System.Object)">
      <summary>
Serializes the object.</summary>
      <param name="obj">
The obj.</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.AuditSerializer.ObjectToString(System.Object)">
      <param name="obj">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.AuditSerializer.ToBinary(System.String)">
      <param name="val">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.AuditSerializer.SerializeObject(System.Object)">
      <summary>
Serializes the object.</summary>
      <param name="obj">
The obj.</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.AuditSerializer.DeSerializeObject(System.Byte[])">
      <summary>
Deserializes the object.</summary>
      <param name="serializedObject">
The serialized object.</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.AuditSerializer.Deserialize(System.Byte[],System.Byte[],System.String,FBNCInject.Framework.Utilities.Enums.ActionType)">
      <param name="databefore">
</param>
      <param name="dataafter">
</param>
      <param name="dataType">
</param>
      <param name="action">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.AuditSerializer.SerializeData(System.Object,System.Object)">
      <param name="objectBefore">
</param>
      <param name="objectAfter">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.AuditSerializer.DeSerializeObject(System.Byte[],System.Byte[])">
      <param name="dataBefore">
</param>
      <param name="dataAfter">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.AuditSerializer.ConvertToList(System.Object,System.Object)">
      <param name="objectBefore">
</param>
      <param name="objectAfter">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.BatchUpload`1">
    </member>
    <member name="P:FBNCInject.Framework.Utilities.BatchUpload`1.ErrorDescription">
    </member>
    <member name="P:FBNCInject.Framework.Utilities.BatchUpload`1.Obj">
    </member>
    <member name="T:FBNCInject.Framework.Utilities.SQLBatchUpload">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SQLBatchUpload.#ctor(System.String)">
      <param name="_constr">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.SQLBatchUpload.BulkUpload`1">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SQLBatchUpload.BulkUpload`1.ToDataTable(System.Collections.Generic.List{`0})">
      <param name="objList">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SQLBatchUpload.BulkUpload`1.BuildInsertQuery">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SQLBatchUpload.BulkUpload`1.InsertWithoutTransaction(System.Collections.Generic.List{`0})">
      <param name="objList">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SQLBatchUpload.BulkUpload`1.InsertOneAtATimeWithoutTransaction(System.Collections.Generic.List{`0})">
      <param name="objList">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SQLBatchUpload.BulkUpload`1.InsertOneAtATimeWithoutTransaction(System.Data.DataTable)">
      <param name="dt">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SQLBatchUpload.BulkUpload`1.InsertViaBulkCopyWithoutTransaction(System.Data.DataTable,System.String)">
      <param name="dt">
</param>
      <param name="conStr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SQLBatchUpload.BulkUpload`1.InsertViaSqlBulkCopyWithInternalTransaction(System.Data.DataTable,System.String)">
      <param name="dt">
</param>
      <param name="conStr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SQLBatchUpload.BulkUpload`1.UploadExcel(System.String,System.String,System.String)">
      <param name="filename">
</param>
      <param name="WorkSheetName">
</param>
      <param name="conStr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SQLBatchUpload.InsertViaSqlBulkCopyWithoutTransaction(System.Data.DataTable,System.String,System.String)">
      <param name="dt">
</param>
      <param name="dbTableName">
</param>
      <param name="conStr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SQLBatchUpload.InsertViaSqlBulkCopyWithInternalTransaction(System.Data.DataTable,System.String,System.String)">
      <param name="dt">
</param>
      <param name="dbTableName">
</param>
      <param name="conStr">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.BinarySerializer">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.BinarySerializer.SerializeObject(System.Object)">
      <summary>
Serializes the object.</summary>
      <param name="obj">
The obj.</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.BinarySerializer.DeSerializeObject(System.Byte[])">
      <summary>
Deserializes the object.</summary>
      <param name="serializedObject">
The serialized object.</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.BinarySerializer.Deserialize(System.Byte[],System.Byte[],System.String,FBNCInject.Framework.Utilities.Enums.AuditAction)">
      <param name="databefore">
</param>
      <param name="dataafter">
</param>
      <param name="dataType">
</param>
      <param name="action">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.BinarySerializer.SerializeData(System.Object,System.Object)">
      <param name="objectBefore">
</param>
      <param name="objectAfter">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.BinarySerializer.DeSerializeObject(System.Byte[],System.Byte[])">
      <param name="dataBefore">
</param>
      <param name="dataAfter">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.BinarySerializer.ConvertToList(System.Object,System.Object)">
      <param name="objectBefore">
</param>
      <param name="objectAfter">
</param>
    </member>
    <member name="N:FBNCInject.Framework.UtilitiesHold">
    </member>
    <member name="T:FBNCInject.Framework.UtilitiesHold.BulkCopy">
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.#ctor(System.String)">
      <param name="con_str">
</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.Method1(System.String,System.String,System.Boolean,System.Boolean,System.Int64,System.String,System.String,System.String[])">
      <summary>
Method1s the specified filename.</summary>
      <param name="filename">
The filename.</param>
      <param name="TableName">
Name of the table.</param>
      <param name="isRowOneHeader">
if set to <c>true</c> [is row one header].</param>
      <param name="isSavedInWebPath">
if set to <c>true</c> [is saved in web path].</param>
      <param name="UploadID">
The upload ID.</param>
      <param name="UploadIDColumnName">
Name of the upload ID column.</param>
      <param name="ConnectionStr">
The connection STR.</param>
      <param name="ColumnNames">
The column names.</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.Method12(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String[])">
      <summary>
Method12s the specified filename.</summary>
      <param name="filename">
The filename.</param>
      <param name="TableName">
Name of the table.</param>
      <param name="isRowOneHeader">
if set to <c>true</c> [is row one header].</param>
      <param name="isSavedInWebPath">
if set to <c>true</c> [is saved in web path].</param>
      <param name="UploadReferenceID">
The upload reference ID.</param>
      <param name="UploadReferenceIDColumnName">
Name of the upload reference ID column.</param>
      <param name="ConnectionStr">
The connection STR.</param>
      <param name="ColumnNames">
The column names.</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.Method2(System.String,System.String,System.Boolean,System.Boolean,System.Int64,System.String,System.String,System.String[])">
      <summary>
Method2s the specified filename.</summary>
      <param name="filename">
The filename.</param>
      <param name="TableName">
Name of the table.</param>
      <param name="isRowOneHeader">
if set to <c>true</c> [is row one header].</param>
      <param name="isSavedInWebPath">
if set to <c>true</c> [is saved in web path].</param>
      <param name="UploadID">
The upload ID.</param>
      <param name="UploadIDColumnName">
Name of the upload ID column.</param>
      <param name="ConnectionStr">
The connection STR.</param>
      <param name="ColumnNames">
The column names.</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.Method22(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String[])">
      <summary>
Method22s the specified filename.</summary>
      <param name="filename">
The filename.</param>
      <param name="TableName">
Name of the table.</param>
      <param name="isRowOneHeader">
if set to <c>true</c> [is row one header].</param>
      <param name="isSavedInWebPath">
if set to <c>true</c> [is saved in web path].</param>
      <param name="UploadReferenceID">
The upload reference ID.</param>
      <param name="UploadReferenceIDColumnName">
Name of the upload reference ID column.</param>
      <param name="ConnectionStr">
The connection STR.</param>
      <param name="ColumnNames">
The column names.</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.Method3(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Int64,System.String,System.String[])">
      <summary>
Method3s the specified filename.</summary>
      <param name="filename">
The filename.</param>
      <param name="TableName">
Name of the table.</param>
      <param name="isRowOneHeader">
if set to <c>true</c> [is row one header].</param>
      <param name="isSavedInWebPath">
if set to <c>true</c> [is saved in web path].</param>
      <param name="ConnectionStr">
The connection STR.</param>
      <param name="UploadID">
The upload ID.</param>
      <param name="UploadIDColumnName">
Name of the upload ID column.</param>
      <param name="ColumnNames">
The column names.</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.Method32(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String[])">
      <summary>
Method32s the specified filename.</summary>
      <param name="filename">
The filename.</param>
      <param name="TableName">
Name of the table.</param>
      <param name="isRowOneHeader">
if set to <c>true</c> [is row one header].</param>
      <param name="isSavedInWebPath">
if set to <c>true</c> [is saved in web path].</param>
      <param name="ConnectionStr">
The connection STR.</param>
      <param name="UploadReferenceID">
The upload reference ID.</param>
      <param name="UploadReferenceIDColumnName">
Name of the upload reference ID column.</param>
      <param name="ColumnNames">
The column names.</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.Method4(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Int64,System.String)">
      <summary>
Method4s the specified filename.</summary>
      <param name="filename">
The filename.</param>
      <param name="TableName">
Name of the table.</param>
      <param name="isRowOneHeader">
if set to <c>true</c> [is row one header].</param>
      <param name="isSavedInWebPath">
if set to <c>true</c> [is saved in web path].</param>
      <param name="ConnectionStr">
The connection STR.</param>
      <param name="UploadID">
The upload ID.</param>
      <param name="UploadIDColumnName">
Name of the upload ID column.</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.Method42(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String)">
      <summary>
Method42s the specified filename.</summary>
      <param name="filename">
The filename.</param>
      <param name="TableName">
Name of the table.</param>
      <param name="isRowOneHeader">
if set to <c>true</c> [is row one header].</param>
      <param name="isSavedInWebPath">
if set to <c>true</c> [is saved in web path].</param>
      <param name="ConnectionStr">
The connection STR.</param>
      <param name="UploadReferenceID">
The upload reference ID.</param>
      <param name="UploadReferenceIDColumnName">
Name of the upload reference ID column.</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.Method5(System.Data.DataTable,System.String,System.Boolean,System.Boolean,System.String,System.Int64,System.String)">
      <summary>
Method5s the specified dt.</summary>
      <param name="dt">
The dt.</param>
      <param name="TableName">
Name of the table.</param>
      <param name="isRowOneHeader">
if set to <c>true</c> [is row one header].</param>
      <param name="isSavedInWebPath">
if set to <c>true</c> [is saved in web path].</param>
      <param name="ConnectionStr">
The connection STR.</param>
      <param name="UploadID">
The upload ID.</param>
      <param name="UploadIDColumnName">
Name of the upload ID column.</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.Method52(System.Data.DataTable,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String)">
      <param name="dt">
</param>
      <param name="TableName">
</param>
      <param name="isRowOneHeader">
</param>
      <param name="isSavedInWebPath">
</param>
      <param name="ConnectionStr">
</param>
      <param name="UploadReferenceID">
</param>
      <param name="UploadReferenceIDColumnName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.Method6(System.String,System.String,System.Boolean,System.Boolean)">
      <param name="filename">
</param>
      <param name="TableName">
</param>
      <param name="isRowOneHeader">
</param>
      <param name="isSavedInWebPath">
</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.IsNumericType(System.Type)">
      <summary>
Determines if a type is numeric. Nullable numeric types are considered numeric.</summary>
      <remarks>
Boolean is not considered numeric.</remarks>
      <param name="type">
</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.GetNumericType(System.Type)">
      <summary>
Determines if a type is numeric. Nullable numeric types are considered numeric.</summary>
      <remarks>
Boolean is not considered numeric.</remarks>
      <param name="type">
</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.BulkCopyInsert(System.Data.DataTable,System.String,System.String)">
      <param name="dt">
</param>
      <param name="TableName">
</param>
      <param name="ConnectionStr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.BulkCopyInsert(System.Data.DataTable,System.String,System.String,System.Int64,System.String)">
      <param name="dt">
</param>
      <param name="TableName">
</param>
      <param name="ConnectionStr">
</param>
      <param name="UploadID">
</param>
      <param name="UploadIDColumnName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.BulkCopyInsert_WithForeignKey(System.Data.DataTable,System.String,System.String,System.String,System.String,System.String@)">
      <param name="dt">
</param>
      <param name="TableName">
</param>
      <param name="ConnectionStr">
</param>
      <param name="FK_Value">
</param>
      <param name="FK_ColumnName">
</param>
      <param name="StrErr">
</param>
    </member>
    <member name="M:FBNCInject.Framework.UtilitiesHold.BulkCopy.BulkCopyInsert_WithForeignKey(System.String,System.String,System.String,System.String,System.String,System.String@)">
      <param name="xml">
</param>
      <param name="TableName">
</param>
      <param name="ConnectionStr">
</param>
      <param name="FK_Value">
</param>
      <param name="FK_ColumnName">
</param>
      <param name="StrErr">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.CSVHandler">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVHandler.ReadCSV(System.String)">
      <param name="path">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVHandler.GetCSVData(System.String,System.String)">
      <param name="strFolderPath">
</param>
      <param name="strFileName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVHandler.CSVToDataTable(System.String,System.Boolean,System.Boolean,System.String)">
      <param name="FileName">
</param>
      <param name="isRowOneHeader">
</param>
      <param name="isSavedInWebPath">
</param>
      <param name="TextDelimeter">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.CSVHelper">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVHelper.ExportToCSV(System.Data.DataTable,System.String,System.Boolean,System.Char,System.Char)">
      <param name="data">
</param>
      <param name="strPath">
</param>
      <param name="HasColumnHeader">
</param>
      <param name="TextDelimiter">
</param>
      <param name="TextQualifier">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.CSVReader">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVReader.#ctor(System.IO.Stream)">
      <param name="filestream">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <param name="filestream">
</param>
      <param name="enc">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVReader.GetCSVLine">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVReader.ReadFile(System.String,System.String)">
      <param name="filepath">
</param>
      <param name="Delimiter">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.CSVWriter">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVWriter.#ctor">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVWriter.#ctor(System.Char)">
      <param name="_TextDelimeter">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVWriter.#ctor(System.Char,System.Char)">
      <param name="_TextDelimeter">
</param>
      <param name="_TextQualifiers">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVWriter.#ctor(System.Char,System.Char,System.Boolean)">
      <param name="_TextDelimeter">
</param>
      <param name="_TextQualifiers">
</param>
      <param name="_HasColumnHeaders">
</param>
    </member>
    <member name="P:FBNCInject.Framework.Utilities.CSVWriter.TextDelimiter">
    </member>
    <member name="P:FBNCInject.Framework.Utilities.CSVWriter.TextQualifiers">
    </member>
    <member name="P:FBNCInject.Framework.Utilities.CSVWriter.HasColumnHeaders">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVWriter.Save(System.Data.DataTable,System.String,System.Boolean,System.Char,System.Char)">
      <param name="data">
</param>
      <param name="strPath">
</param>
      <param name="_HasColumnHeader">
</param>
      <param name="_TextDelimiter">
</param>
      <param name="_TextQualifier">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.CSVWriter.DataTableToCSV(System.Data.DataTable)">
      <param name="InputTable">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.EnumBinder">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.EnumBinder.GetEnumNames(System.String)">
      <param name="enumStringType">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.EnumBinder.LoadEnum(System.String)">
      <param name="enumStringType">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.EnumDictionary">
    </member>
    <member name="P:FBNCInject.Framework.Utilities.EnumDictionary.EnumID">
    </member>
    <member name="P:FBNCInject.Framework.Utilities.EnumDictionary.EnumText">
    </member>
    <member name="T:FBNCInject.Framework.Utilities.EnumDictionary.EnumUtil`1">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.EnumDictionary.EnumUtil`1.NumToEnum(System.Int32)">
      <param name="number">
</param>
    </member>
    <member name="N:FBNCInject.Framework.Utilities.Enums">
    </member>
    <member name="T:FBNCInject.Framework.Utilities.Enums.ItemCollection">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Enums.ItemCollection.#ctor(System.Int32)">
      <param name="noOfItem">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Enums.ItemCollection.GetEnumerator">
    </member>
    <member name="T:FBNCInject.Framework.Utilities.Enums.ItemCollection.ItemIterator">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Enums.ItemCollection.ItemIterator.#ctor(FBNCInject.Framework.Utilities.Enums.ItemCollection)">
      <param name="ic">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Enums.ItemCollection.ItemIterator.MoveNext">
    </member>
    <member name="P:FBNCInject.Framework.Utilities.Enums.ItemCollection.ItemIterator.Current">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Enums.ItemCollection.ItemIterator.Reset">
    </member>
    <member name="T:FBNCInject.Framework.Utilities.ExcelHelper">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.ExcelHelper.ExportToExcel(System.Data.DataTable,System.String)">
      <param name="Tbl">
</param>
      <param name="ExcelFilePath">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.ExpressionBuilder">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.ExpressionBuilder.GetExpression``1(System.Collections.Generic.IList{FBNCInject.Framework.Utilities.Filter})">
      <param name="filters">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.Filter">
    </member>
    <member name="P:FBNCInject.Framework.Utilities.Filter.PropertyName">
    </member>
    <member name="P:FBNCInject.Framework.Utilities.Filter.Operation">
    </member>
    <member name="P:FBNCInject.Framework.Utilities.Filter.Value">
    </member>
    <member name="T:FBNCInject.Framework.Utilities.HTMLHelper">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.HTMLHelper.ConvertToHtmlPage(System.Data.DataTable)">
      <summary>
This provides a simple way to convert a DataTable to an HTML file.</summary>
      <returns>
This is the HTML output, which can saved as a file.</returns>
      <param name="dt">
This the table to convert.</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.HTMLHelper.ConvertToHtmlTable(System.Data.DataTable)">
      <summary>
This provides a simple way to convert a DataTable to an HTML file.</summary>
      <returns>
This is the HTML output, which can saved as a file.</returns>
      <param name="dt">
This the table to convert.</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.JSONHelper">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.JSONHelper.DownloadSerializedJSONDataAsync``1(System.String)">
      <param name="url">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.JSONHelper.DownloadSerializedJSONDataAsync``1(System.String,FBNCInject.Framework.Utilities.Enums.APIType,System.String)">
      <param name="url">
</param>
      <param name="apiType">
</param>
      <param name="YouTubeAPIKey">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.Logger">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Logger.WriteToEventLog(System.String,System.String,System.Diagnostics.EventLogEntryType,System.String)">
      <param name="message">
</param>
      <param name="AppName">
</param>
      <param name="EventType">
</param>
      <param name="LogName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Logger.WriteErrorToEventLog(System.Exception,System.String,System.Diagnostics.EventLogEntryType,System.String)">
      <param name="ex">
</param>
      <param name="AppName">
</param>
      <param name="EventType">
</param>
      <param name="LogName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Logger.WriteToEventLog(System.Exception,System.String,System.Diagnostics.EventLogEntryType,System.String)">
      <param name="ex">
</param>
      <param name="AppName">
</param>
      <param name="EventType">
</param>
      <param name="LogName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Logger.WriteErrorToEventLog(System.String,System.String,System.Diagnostics.EventLogEntryType,System.String)">
      <param name="message">
</param>
      <param name="AppName">
</param>
      <param name="EventType">
</param>
      <param name="LogName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Logger.LogError(System.Exception,System.String,System.String)">
      <param name="ex">
</param>
      <param name="ObjName">
</param>
      <param name="AppName">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.Logger.LogError(System.String,System.String,System.String)">
      <param name="err">
</param>
      <param name="ObjName">
</param>
      <param name="AppName">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.QueryBuilder">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.QueryBuilder.#ctor(System.Boolean)">
      <param name="_EnableNamedParams">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.QueryBuilder.BuildQuery(System.String,System.Object[])">
      <param name="sql">
</param>
      <param name="args">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.QueryBuilder.BuildSql(System.Boolean,System.String,System.Object[])">
      <param name="EnableNamedParams">
</param>
      <param name="sql">
</param>
      <param name="args">
</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.SqlHelper">
      <summary>
A simple helper class for build SQL statements</summary>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SqlHelper.#ctor">
      <summary>
Default, empty constructor</summary>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SqlHelper.#ctor(System.String,System.Object[])">
      <summary>
Construct an SQL statement with the supplied SQL and arguments</summary>
      <param name="sql">
The SQL statement or fragment</param>
      <param name="args">
Arguments to any parameters embedded in the SQL</param>
    </member>
    <member name="P:FBNCInject.Framework.Utilities.SqlHelper.Builder">
      <summary>
Instantiate a new SQL Builder object. Weirdly implemented as a property but makes for more elegantly readble fluent style construction of SQL Statements eg: db.Query(Sql.Builder.Append(....))</summary>
    </member>
    <member name="P:FBNCInject.Framework.Utilities.SqlHelper.SQL">
      <summary>
Returns the final SQL statement represented by this builder</summary>
    </member>
    <member name="P:FBNCInject.Framework.Utilities.SqlHelper.Arguments">
      <summary>
Gets the complete, final set of arguments collected by this builder.</summary>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SqlHelper.Append(FBNCInject.Framework.Utilities.SqlHelper)">
      <summary>
Append another SQL builder instance to the right-hand-side of this SQL builder</summary>
      <returns>
A reference to this builder, allowing for fluent style concatenation</returns>
      <param name="sql">
A reference to another SQL builder instance</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SqlHelper.Append(System.String,System.Object[])">
      <summary>
Append an SQL fragement to the right-hand-side of this SQL builder</summary>
      <returns>
A reference to this builder, allowing for fluent style concatenation</returns>
      <param name="sql">
The SQL statement or fragment</param>
      <param name="args">
Arguments to any parameters embedded in the SQL</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SqlHelper.Where(System.String,System.Object[])">
      <summary>
Appends an SQL WHERE clause to this SQL builder</summary>
      <returns>
A reference to this builder, allowing for fluent style concatenation</returns>
      <param name="sql">
The condition of the WHERE clause</param>
      <param name="args">
Arguments to any parameters embedded in the supplied SQL</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SqlHelper.OrderBy(System.Object[])">
      <summary>
Appends an SQL ORDER BY clause to this SQL builder</summary>
      <returns>
A reference to this builder, allowing for fluent style concatenation</returns>
      <param name="columns">
A collection of SQL column names to order by</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SqlHelper.Select(System.Object[])">
      <summary>
Appends an SQL SELECT clause to this SQL builder</summary>
      <param name="columns">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SqlHelper.From(System.Object[])">
      <summary>
Appends an SQL FROM clause to this SQL builder</summary>
      <returns>
A reference to this builder, allowing for fluent style concatenation</returns>
      <param name="tables">
A collection of table names to be used in the FROM clause</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SqlHelper.GroupBy(System.Object[])">
      <summary>
Appends an SQL GROUP BY clause to this SQL builder</summary>
      <returns>
A reference to this builder, allowing for fluent style concatenation</returns>
      <param name="columns">
A collection of column names to be grouped by</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SqlHelper.InnerJoin(System.String)">
      <summary>
Appends an SQL INNER JOIN clause to this SQL builder</summary>
      <returns>
A reference an SqlJoinClause through which the join condition can be specified</returns>
      <param name="table">
The name of the table to join</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SqlHelper.LeftJoin(System.String)">
      <summary>
Appends an SQL LEFT JOIN clause to this SQL builder</summary>
      <returns>
A reference an SqlJoinClause through which the join condition can be specified</returns>
      <param name="table">
The name of the table to join</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.SqlHelper.SqlJoinClause">
      <summary>
The SqlJoinClause is a simple helper class used in the construction of SQL JOIN statements with the SQL builder</summary>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SqlHelper.SqlJoinClause.#ctor(FBNCInject.Framework.Utilities.SqlHelper)">
      <param name="sql">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.SqlHelper.SqlJoinClause.On(System.String,System.Object[])">
      <summary>
Appends a SQL ON clause after a JOIN statement</summary>
      <returns>
A reference to the parent SQL builder, allowing for fluent style concatenation</returns>
      <param name="onClause">
The ON clause to be appended</param>
      <param name="args">
Arguments to any parameters embedded in the supplied SQL</param>
    </member>
    <member name="T:FBNCInject.Framework.Utilities.XmlHelper">
    </member>
    <member name="M:FBNCInject.Framework.Utilities.XmlHelper.Serialize``1(``0,System.Boolean)">
      <param name="data">
</param>
      <param name="indent">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.XmlHelper.Serialize``1(``0)">
      <param name="data">
</param>
    </member>
    <member name="M:FBNCInject.Framework.Utilities.XmlHelper.Deserialize``1(System.String)">
      <param name="xmlStr">
</param>
    </member>
  </members>
</doc>
